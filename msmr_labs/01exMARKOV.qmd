---
title: "Week 1 Exercises: Intro to MLM"
params: 
    SHOW_SOLS: TRUE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
library(ggdist)
xaringanExtra::use_panelset()
qcounter <- function(){
  if(!exists("qcounter_i")){
    qcounter_i <<- 1
  }else{
    qcounter_i <<- qcounter_i + 1
  }
  qcounter_i
}
```




::: {.callout-note collapse="true"}
#### New Packages!

These are the main packages we're going to use in this block. It might make sense to install them now *if you do not have them already*

+ __tidyverse__ : for organising data  
+ __lme4__ : for fitting generalised linear mixed effects models
+ __broom.mixed__ : tidying methods for mixed models
+ __effects__ : for tabulating and graphing effects in linear models
+ __lmerTest__: for quick p-values from mixed models
+ __parameters__: various inferential methods for 

:::

# A Toy Example  

```{r}
#| include: false
toyyear <- tribble(
  ~toy_type,~year,
  "Barbie",1959,
  "Farm Animals",1955,
  "Furby",1998,
  "G.I.Joe",1964,
  "Lego Minifigures",1979,
  "Minecraft",2011,
  "My Little Pony",1982,
  "Peppa Pig",2004,
  "Playmobil",1975,
  "Polly Pocket",1983,
  "Power Rangers",1993,
  "Rugrats",1991,
  "Scooby Doo",1969,
  "Sock Puppets",1901,
  "Star Wars",1977,
  "Stretch Armstrong",1976,
  "SuperZings",2018,
  "Teenage Mutant Ninja Turtles",1990,
  "Toy Story",1996,
  "Transformers",1984
) 
toys_read <- read_csv("https://uoepsy.github.io/data/toyexample.csv")

toy2 <- left_join(toys_read, toyyear) |>
  select(toy_type, year, toy, hrs_week, R_AGE) |>
  arrange(toy_type) |>
  mutate(
    R_AGE = round(pmax(0,scale(R_AGE)[,1]*3 + 7))
  ) |>
  filter(!toy %in% c("Sock 3","Mr Sock","Progressive Sock"))

toy2[toy2$toy_type=="Sock Puppets","R_AGE"]<-c(13,1,15)

# write_csv(toy2, "../../data/toy2.csv")
```


For our first foray into the multilevel model, we're going to start with little toy example, and we're just going to ask you to plot the predictions from a) a simple linear model, b) a model with a random intercept, and c) a model with random intercepts and slopes.  

This is to build the understanding of the structure of multilevel models. When it comes to actually building models for research purposes, it is not necessary to slowly build up the complexity in this way.  

:::frame
__Data: New Toys!__  
  
Recall the example from last semesters' USMR course, where the lectures explored linear regression with a toy dataset of how practice influences the reading age of toy characters (see [USMR Week 7 Lecture](https://uoepsy.github.io/usmr/2324/lectures/lecture06.html#/learning-to-read-1){target="_blank"}). We're going to now broaden our scope to the investigation of how practice affects reading age for **all** toys (not just Martin's Playmobil characters).  

You can find a dataset at [https://uoepsy.github.io/data/toy2.csv](https://uoepsy.github.io/data/toy2.csv){target="_blank"} containing information on 129 different toy characters that come from a selection of different families/types of toy. You can see the variables in the table below^[Image sources:<br>http://tophatsasquatch.com/2012-tmnt-classics-action-figures/<br>https://www.dezeen.com/2016/02/01/barbie-dolls-fashionista-collection-mattel-new-body-types/<br>https://www.wish.com/product/5da9bc544ab36314cfa7f70c<br>https://www.worldwideshoppingmall.co.uk/toys/jumbo-farm-animals.asp<br>https://www.overstock.com/Sports-Toys/NJ-Croce-Scooby-Doo-5pc.-Bendable-Figure-Set-with-Scooby-Doo-Shaggy-Daphne-Velma-and-Fred/28534567/product.html<br>https://tvtropes.org/pmwiki/pmwiki.php/Toys/Furby<br>https://www.fun.com/toy-story-4-figure-4-pack.html<br>https://www.johnlewis.com/lego-minifigures-71027-series-20-pack/p5079461].  
<br>  

:::: {.columns}
::: {.column width="45%"}
```{r echo=FALSE, out.width="300px",fig.align="center"}
knitr::include_graphics("images/toys.png")
```
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
```{r echo=FALSE, message=FALSE,warning=FALSE}
library(gt)
tibble(variable=names(toy2),
       description=c("Type of Toy","Year Released","Character","Hours of practice per week","Reading Age")
) %>% gt()

```
:::
::::

:::

`r qbegin(qcounter())`
Read in the data and plot the relationship between hours-per-week practice (`hrs_week`) and reading age (`R_AGE`).  
Facet the plot by the type of toy.  


::: {.callout-tip collapse="true"}
#### Hints

"facet" is the key word here! See [1A #visualisations](01a_clustered.html#visualisations){target="_blank"}

:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
library(tidyverse)
toy2 <- read_csv("https://uoepsy.github.io/data/toy2.csv")

head(toy2)

ggplot(toy2,aes(x=hrs_week,y=R_AGE))+
  geom_point()+
  facet_wrap(~toy_type)
```

`r solend()`

`r qbegin(qcounter())`
Below is the code to fit a simple linear model and produce some diagnostic plots.  
After running the code, do you think that we have violated any assumptions?  
```{r}
#| eval: false
mod1 <- lm(R_AGE ~ hrs_week, data = toy2)
plot(mod1)
```


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
We have violated an assumption here, and we don't need to look at the plots to realise it! As it happens, the plots don't actually look _terrible_ (the scale-location plot is a bit meh, but other than that things look okay).  

The assumption we have violated is that of **independence**. This is something we know through our understanding of the sampling procedure that has led to this data. We have got a random sample of different types of toys (e.g. power-rangers, toy-story, furbies etc), and within those types, we have a random sample of characters.  

But it is entirely likely that the type of toy is going to influence their reading age (i.e. farm animals might read worse than playmobil, etc).  

So this is something we can't really "see" in the data - we have to *think*. What do we know about the data generating process? (i.e. the process that led to this data)

```{r}
#| eval: false
mod1 <- lm(R_AGE ~ hrs_week, data = toy2)
plot(mod1)
```
```{r}
#| echo: false
mod1 <- lm(R_AGE ~ hrs_week, data = toy2)
par(mfrow=c(2,2));plot(mod1);par(mfrow=c(1,1))
```

`r solend()`

`r qbegin(qcounter())`
There are lots of ways in R to get predicted values for a linear model (e.g. we saw `augment()` a lot in USMR). 

The simplest way is to use functions like `predict()` or `fitted()` (they do the same thing), which gives us a vector of predicted values, which we can append to our dataframe (provided we don't have missing data): 
```{r}
#| eval: false
data$predictedvalues <- predict(model)
```

Add the predictions from the linear model in the previous question to the facetted plot that you created in the earlier question. How well does the model fit each type of toy?  
`r qend()`
`r solbegin(label="1 - add predictions to data", slabel=F,show=T, toggle=params$TOGGLE)`
This only works because we don't have missing data (and so the length of `predict(mod1)` is the same as `nrow(toy2)`, and the predictions are in the correct order)  
```{r}
# add predictions to data:
toy2$pred <- predict(mod1)
```


`r solend()`
`r solbegin(label="2 - add predictions to the plot", slabel=F,show=T, toggle=params$TOGGLE)`
```{r}
# plot both predictions and observations:
toy2 |>
  ggplot(aes(x=hrs_week))+
  geom_point(aes(y=R_AGE)) + # observations
  geom_line(aes(y=pred)) + # predictions
  facet_wrap(~toy_type)
```
`r solend()`


`r qbegin(qcounter())`
Load the __lme4__ package, and fit a model with random intercepts for each toy type.  

Using either `predict()` again, or this time you can use `augment()` from the __broom.mixed__ package, plot the predicted values and the observations.  

::: {.callout-tip collapse="true"}
#### Hints

You can see a model with a random intercept fitted in [1B# fitting-multilevel-models-in-r](01b_lmm.html#fitting-multilevel-models-in-r){target="_blank"}.  

:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Here's our model, with a random intercept by toy-type:
```{r}
library(lme4)
library(broom.mixed)

mod2 <- lmer(R_AGE ~ 1 + hrs_week + (1 | toy_type), data = toy2)
```
We can use `augment()` from the __broom.mixed__ package, and which gives us the variables in the model along with things like fitted values (in the `.fitted` column)
```{r}
#| eval: false
augment(mod2)
```
```{r}
#| echo: false
print(augment(mod2),n=5)
```
```{r}
augment(mod2) |>
  ggplot(aes(x=hrs_week))+
  geom_point(aes(y=R_AGE)) + # observations
  geom_line(aes(y=.fitted)) + # predictions
  facet_wrap(~toy_type)
```

Note that the model predictions are now a lot better than they were for the single level linear model. The line has moved up for the "Scooby Doos", and down for the "Farm Animals", etc. But the lines are all still the same slope. The slope is "fixed".  

`r solend()`


`r qbegin(qcounter())`
Now fit a model with random intercepts *and* slopes for each toy type. 

As before, plot the predicted values of this model alongside the observations
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
mod3 <- lmer(R_AGE ~ 1 + hrs_week + (1 + hrs_week| toy_type), 
             data = toy2)

augment(mod3) |>
  ggplot(aes(x=hrs_week))+
  geom_point(aes(y=R_AGE)) + # observations
  geom_line(aes(y=.fitted)) + # predictions
  facet_wrap(~toy_type)
```

This looks even better - the lines are at good heights and good angles for each type of toy. Why? Because we have modelled the intercept (line height) and slope of `hrs_week` (line angle) as varying across types of toy!  

`r solend()`


`r qbegin(qcounter())`
Finally, add a `geom_smooth` to the plot from the previous question (making sure that this is has `y=R_AGE`).  
This will add a separate linear model `lm()` line for each of the facets in the plot.  

What differences (look closely!) do you notice between the predictions from the model with random intercepts and slopes, and the simple geom_smooths? 


::: {.callout-tip collapse="true"}
#### Hints

You could try changing `col`, `lty`, and `lwd` to make things easier to see.  

What we're doing here is showing to ourselves 'partial pooling' in action ([1B #partial-pooling](01b_lmm.html#partial-pooling){target="_blank"}).  

:::


`r qend()`
`r solbegin(label="1 - adding geom_smooths to the plot", slabel=F,show=T, toggle=params$TOGGLE)`
here's the model we are using:
```{r}
mod3 <- lmer(R_AGE ~ 1 + hrs_week + (1 + hrs_week| toy_type), 
             data = toy2)
```

and here is our plot:
```{r}
augment(mod3) |>
  ggplot(aes(x=hrs_week))+
  geom_point(aes(y=R_AGE)) + # observations
  geom_line(aes(y=.fitted)) + # predictions
  geom_smooth(aes(y=R_AGE), method=lm, se=F) + # simple smooths
  facet_wrap(~toy_type)
```
`r solend()`
`r solbegin(label="2 - why?", slabel=F,show=T, toggle=params$TOGGLE)`
I've made it a bit clearer here by changing up the colours and  linewidths (`lwd`), and subsetting to just a select few of the toy types:  
```{r}
augment(mod3) |>
  filter(toy_type %in% c("Farm Animals","Scooby Doo","Sock Puppets","Polly Pocket")) |>
  ggplot(aes(x=hrs_week))+
  geom_point(aes(y=R_AGE), alpha=.2) + # observations
  geom_line(aes(y=.fitted), col="orange", lwd=1) + # predictions
  geom_smooth(aes(y=R_AGE), method=lm, se=F, lty="dashed") + # simple smooths
  facet_wrap(~toy_type)
```
For most of the toy types things look pretty similar. However, for "Sock Puppets" (only has 3 data points) the model predicted slope is shrunk back towards the average. 
It is also possible to see this in the "Farm Animals" and "Scooby Doo" - the shrinkage is more noticeable on these because they are further away from the average. 

`r solend()`


`r qbegin(qcounter())`
Here is the model with the random intercepts (but not random slopes) that we fitted in an earlier question.  

Below is the code that produces a plot of the fitted values: 

::: {.callout-note collapse="true"}
#### A. Model Equation

$$
\begin{align}
\text{For Toy }j\text{ of Type }i & \\
\text{Level 1 (Toy):}& \\
\text{R\_AGE}_{ij} &= b_{0i} + b_1 \cdot \text{hrs\_week}_{ij} + \epsilon_{ij} \\
\text{Level 2 (Type):}& \\
b_{0i} &= \gamma_{00} + \zeta_{0i} \\
\end{align}
$$  
  
  
:::
::: {.callout-note collapse="true"}
#### B. Model output

```{r}
mod2 <- lmer(R_AGE ~ 1 + hrs_week + (1 | toy_type), 
             data = toy2)
summary(mod2)
```

:::
::: {.callout-note collapse="true"}
#### C. Plot of fitted values

```{r}
augment(mod2) |>
  ggplot(aes(x=hrs_week, col=toy_type))+
  geom_point(aes(y=R_AGE),alpha=.3) + # observations
  geom_line(aes(y=.fitted)) + # predictions 
  geom_abline(intercept = fixef(mod2)[1], 
              slope = fixef(mod2)[2], lwd=1) +  # fixed effect line
  guides(col="none") # remove legend
```

:::

Match the parameters from the model equation, as well as coefficients from model output, to the corresponding points on the plot of fitted values.  

:::: {.columns}
::: {.column width="20%"}
__Model Equation__  

+ **A1:** $\sigma_{0}$   
+ **A2:** $\sigma_{\varepsilon}$  
+ **A3:** $\gamma_{00}$  
+ **A4:** $b_{1}$  

:::
::: {.column width="20%"}
__Model Output__  

+ **B1:** 0.7118  
+ **B2:** 2.698  
+ **B3:** 1.597  
+ **B4:** 4.2594  

:::
::: {.column width="60%"}
__Plot of fitted values__  

+ **C1:** the standard deviation of the distances from all the individual toy types lines to the black line  
+ **C2:** where the black line cuts the y axis  
+ **C3:** the slope of the black line  
+ **C4:** the standard deviation of the distances from all the individual observations to the line for the toy type to which it belongs.  




:::

::::




`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

- A1 = B2 = C1
- A2 = B3 = C4
- A3 = B4 = C2
- A4 = B1 = C3

`r solend()`




<br>
<div class="divider div-transparent div-dot"></div>


# Audio Interference in Executive Functioning

```{r}
#| include: false
set.seed(5)
n_groups = 30
N = n_groups*3*5
g = rep(1:n_groups, e = N/n_groups)

w = rep(rep(letters[1:3],5),n_groups)
w1 = model.matrix(lm(rnorm(N)~w))[,2]
w2 = model.matrix(lm(rnorm(N)~w))[,3]

b = rep(0:1, e = N/2)

re0 = rnorm(n_groups, sd = 2)[g]
re_w1  = rnorm(n_groups, sd = 1)[g]
re_w2  = rnorm(n_groups, sd = 1)[g]

lp = (0 + re0) + 
  (3)*b + 
  (0 + re_w1)*w1 +
  (-2 + re_w2)*w2 + 
  (2)*b*w1 +
  (-1)*b*w2
  
y = rnorm(N, mean = lp, sd = 1.5) # create a continuous target variable

df <- data.frame(w, g=factor(g),b, y)
head(df)
with(df,boxplot(y~interaction(w,b)))

library(tidyverse)
df %>% transmute(
  PID = paste0("PPT_",formatC(g,width=2,flag=0)),
  audio = fct_recode(factor(w),
                     no_audio = "a",
                     white_noise = "b",
                     music = "c"),
  headphones = fct_recode(factor(b),
                          speakers = "0",
                          anc_headphones = "1"),
  SDMT = pmax(0,round(35 + scale(y)[,1]*12))
) %>% arrange(PID,audio,headphones) -> ef_music

ef_music <- ef_music %>% group_by(PID) %>%
  mutate(trial_n = paste0("Trial_",formatC(sample(1:15),width=2,flag=0))) %>%
  arrange(PID,trial_n) %>% ungroup()

efrep <- slice_sample(ef_music, prop = .8) %>% select(PID,trial_n,audio,headphones,SDMT)

# write_csv(efrep, file="../../data/ef_replication.csv")
```

:::frame
__Data: Audio interference in executive functioning__  

This data is from a simulated study that aims to investigate the following research question: 

> How do different types of audio interfere with executive functioning, and does this interference differ depending upon whether or not noise-cancelling headphones are used? 

`r length(unique(efrep$PID))` healthy volunteers each completed the Symbol Digit Modalities Test (SDMT) - a commonly used test to assess processing speed and motor speed - a total of 15 times. During the tests, participants listened to either no audio (5 tests), white noise (5 tests) or classical music (5 tests). Half the participants listened via active-noise-cancelling headphones, and the other half listened via speakers in the room. Unfortunately, lots of the tests were not administered correctly, and so not every participant has the full 15 trials worth of data.  

The data is available at [https://uoepsy.github.io/data/ef_replication.csv](https://uoepsy.github.io/data/ef_replication.csv).  

```{r}
#| echo: false
efrep <- read_csv("https://uoepsy.github.io/data/ef_replication.csv")
tibble(variable=names(efrep),
       description = c(
         "Participant ID",
         "Trial Number (1-15)",
         "Audio heard during the test ('no_audio', 'white_noise','music')",
         "Whether the participant listened via speakers in the room or via noise cancelling headphones",
         "Symbol Digit Modalities Test (SDMT) score")
) %>% gt()
```

:::

`r qbegin(qcounter())`
How many participants are there in the data?   
How many have complete data (15 trials)?  
What is the average number of trials that participants completed? What is the minimum?   
Does every participant have _some_ data for each type of audio?  

::: {.callout-tip collapse="true"}
#### Hints

Functions like `table()` and `count()` will likely be useful here. 
:::


`r qend()`
`r solbegin(label="1 - read in the data ", slabel=F,show=T, toggle=params$TOGGLE)`
```{r}
efrep <- read_csv("https://uoepsy.github.io/data/ef_replication.csv")
head(efrep)
```
`r solend()`
`r solbegin(label="2 - how many ppts?", slabel=F,show=T, toggle=params$TOGGLE)`
For a quick "how many?", functions like `n_distinct()` can be handy:  
```{r}
n_distinct(efrep$PID)
```

Which is essentially the same as asking: 
```{r}
unique(efrep$PID) |> length()
```


`r solend()`
`r solbegin(label="3 - how many observations per ppt?", slabel=F,show=T, toggle=params$TOGGLE)`
Here are the counts of trials for each participant. 
```{r}
#| eval: false
efrep |> 
  count(PID)
```
```{r}
#| echo: false
efrep |> 
  count(PID) |>
  print(n=5)
```

We can pass that to something like `summary()` to get a quick descriptive of the `n` column, and so we can see that no participant completed all 15 trials (max is 14). Everyone completed at least 10, and the median was 12. 
```{r}
efrep |> 
  count(PID) |>
  summary()
```

We could also do this easily with things like:
```{r}
table(efrep$PID) |> median()
```

`r solend()`
`r solbegin(label="4 - how many observations for each audio type per ppt?", slabel=F,show=T, toggle=params$TOGGLE)`
For this kind of thing I would typically default to using `table()` for smaller datasets, to see how many datapoints are in each combination of `PID` and `audio`:  
```{r}
table(efrep$PID, efrep$audio)
```

From the above, we can see that everyone has data from $\geq 2$ trials for a given audio type.  

```{r}
table(efrep$PID, efrep$audio) |> min()
```


::: {.callout-tip collapse="true"}
#### a tidyverse way:

When tables get too big, we can do the same thing with `count()`, but we need to make sure that we are working with factors, in order to summarise all possible combinations of groups (even empty ones)
```{r}
efrep |> 
  mutate(PID = factor(PID),
         audio = factor(audio)) |>
  # the .drop=FALSE means "keep empty groups"
  count(PID,audio,.drop=FALSE) |> 
  summary()
```

There are plenty of other ways (e.g., you could use combinations of `group_by()`, `summarise()`), so just pick one that makes sense to you.  

:::

`r solend()`


`r qbegin(qcounter())`
Consider the following questions about the study:  
  
- What is our outcome of interest?  
- What variables are we seeking to investigate in terms of their impact on the outcome?    
- What are the units of observations?  
- Are the observations clustered/grouped? In what way?  
- What varies *within* these clusters?  
- What varies *between* these clusters?  

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

- What is our outcome of interest?  
    + __SDMT scores__  
- What variables are we seeking to investigate in terms of their impact on the outcome?  
    + __audio type__ and the interaction __audio type $\times$ wearing headphones__
- What are the units of observations?  
    + __individual trials__  
- What are the groups/clusters?  
    + __participants__  
- What varies *within* these clusters?  
    + __the type of audio__    
- What varies *between* these clusters?  
    + __whether they listen via headphones or speakers__  

`r solend()`

`r qbegin(qcounter())`
Calculate the ICC, using the `ICCbare()` function from the **ICC** package.  

How much of the variation in SDMT scores is attributable to participant level differences?  


::: {.callout-tip collapse="true"}
#### Hints

See [1A #icc](01a_clustered.html#icc---quantifying-clustering-in-an-outcome-variable){target="_blank"}, or look up the help documentation for `?ICCbare()`.  

:::

  

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
`r (ICC::ICCbare(x = PID, y = SDMT, data = efrep)[[1]]*100) |> round()`% of the variance in SDMT scores is attributable to participant level differences.  
```{r}
library(ICC)
ICCbare(x = PID, y = SDMT, data = efrep)
```
`r solend()`

`r qbegin(qcounter())`
The multilevel model that has only an intercept (and the grouping structure) specified is sometimes referred to as the "null model" (or "intercept only model").  
Because there are no predictors in the fixed effects there is just a single value (the intercept). All of the variance in the outcome gets modelled in the random effects part, and is partitioned into either 'variance between groups' or 'residual variance'. This means we can just use those estimates to calculate the ICC.  

For our executive functioning study, fit the null model use the output to calculate the ICC.  
Compare it to the answer from the previous question (it should be pretty close!)


::: {.callout-tip collapse="true"}
#### Hints


```{r}
#| echo: false
knitr::include_graphics("images/nullmod.png")
```

The formula for the ICC is:  
$$
ICC = \frac{\sigma^2_{b}}{\sigma^2_{b} + \sigma^2_e} = \frac{\text{between-group variance}}{\text{between-group variance}+\text{within-group variance}}
$$


:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
nullmod <- lmer(SDMT ~ 1 + (1 | PID), data = efrep)
summary(nullmod)
```
```{r}
#| echo: false
rr = as.data.frame(VarCorr(nullmod))[,4]
```

$\frac{`r round(rr[1],2)`}{`r round(rr[1],2)`+`r round(rr[2],2)`} = `r round(rr[1]/sum(rr),2)`$, or `r round(rr[1]/sum(rr),2)*100`% of the variance in SDMT scores is explained by participant differences.  

This matches (closely enough) with the `ICCbare()` function from the previous question! 

`r solend()`

`r qbegin(qcounter())`
Make factors and set the reference levels of the `audio` and `headphones` variables to "no audio" and "speakers" respectively.    


::: {.callout-tip collapse="true"}
#### Hints

Can't remember about setting factors and reference levels? Check back to USMR materials!  

:::



`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
efrep <- efrep %>%
  mutate(
    audio = fct_relevel(factor(audio), "no_audio"),
    headphones = fct_relevel(factor(headphones), "speakers")
  )
```


`r solend()`


`r qbegin(qcounter())`
Fit a multilevel model to address the aims of the study (copied below)

> How do different types of audio interfere with executive functioning, and does this interference differ depending upon whether or not noise-cancelling headphones are used? 
 
Specifying the model may feel like a lot, but try splitting it into three parts:  

$$
\text{lmer(}\overbrace{\text{outcome }\sim\text{ fixed effects}}^1\, + \, (1 + \underbrace{\text{slopes}}_3\, |\, \overbrace{\text{grouping structure}}^2 )
$$


1. Just like the `lm()`s we have used in USMR, think about what we want to _test_. This should provide the outcome and the structure of our fixed effects.  
2. Think about how the observations are clustered/grouped. This should tell us how to specify the grouping structure in the random effects.  
3. Think about which slopes (i.e. which terms in our fixed effects) could feasibly vary between the clusters. This provides you with what to put in as random slopes.  

`r qend()`
`r solbegin(label="1 - fixed effects", slabel=F,show=T, toggle=params$TOGGLE)`

The question  
&nbsp;&nbsp;&nbsp; "*How do different types of audio interfere with executive functioning*"   means we are interested in the effects of audio type (`audio`) on executive functioning (`SDMT` scores), so we will want:

```
lmer(SDMT ~ audio ...
```

However, the research aim also asks    
&nbsp;&nbsp;&nbsp; "*... and does this interference differ depending upon whether or not noise-cancelling headphones are used?*"  
which suggests that we are interested in the interaction `SDMT ~ audio * headphones`  

```
lmer(SDMT ~ audio * headphones + ...   
```

`r solend()`
`r solbegin(label="2 - hierarchical data structure", slabel=F,show=T, toggle=params$TOGGLE)`

There are lots of ways that our data is grouped.  
We have:  

- 3 different groups of audio type (`r paste(unique(efrep$audio),collapse=", ")`)
- 2 groups of listening condition (`r paste(unique(efrep$headphones),collapse=", ")`)
- 30 groups of participants ("PPT_01", "PPT_02", "PPT_03", ...) 

The effects of audio type and headphones are both things we actually want to _test_ - these variables are in our fixed effects. The levels of audio and headphones are not just a random sample from a wider population of levels - they're a specific set of things we want to compare SDMT scores between.  

Compare this with the participants - we don't care about if there is a difference in SDMT scores between e.g., "PPT_03" and "PPT_28". The participants themselves are just a sample of people that we have taken from a wider population. This makes thinking of "by-participant random effects" a sensible approach - we model differences between participants as a normal distribution of deviations around some average:    

```
lmer(SDMT ~ audio * headphones + (1 + ... | PID)  
```

The minimum that we can include is the random intercept. What `(1|PID)` specifies is that "participants vary in their SDMT scores". This makes sense - we would expect some participants to have higher executive functioning (and so will tend to score high on the SDMT), and others to have lower functioning (and so tend to score lower).  


`r solend()`
`r solbegin(label="3 - random slopes", slabel=F,show=T, toggle=params$TOGGLE)`

We can also include a random by-participant effect of `audio`.  
`audio|PID` specifies that the effect of audio type on SDMT varies by participant. This seems feasible - music might be very distracting (and interfere a lot with the test) for some participants, but have a negligible effect for others.  

```
lmer(SDMT ~ audio * headphones + 
              (1 + audio | PID), data = efrep)
```


::: {.callout-tip collapse="true"}
#### Why can't we have `(headphones|PID)`?  

Why can we fit `(1 + audio | PID)` but not `(1 + headphones | PID)`, or both `(1 + audio + headphones | PID)` or `(1 + audio * headphones | PID)`?  

Remember that `y ~ ... + (x | g)` is saying "the slope of y~x varies by g".  
Such a sentence only makes sense if each "the slope of y~x" is defined for every (or most) groups.  

For the `headphones` predictor, every participant is _either_ in the "speakers" condition _or_ the "anc_headphones" condition.  

```{r}
ggplot(efrep, aes(x=headphones,y=SDMT))+
  geom_boxplot() +
  facet_wrap(~PID) 

```

:::

`r solend()`



`r qbegin(qcounter())`
We now have a model, but we don't have any p-values or confidence intervals or anything - i.e. we have no inferential criteria on which to draw conclusions. There are a whole load of different methods available for drawing inferences from multilevel models, which means it can be a bit of a never-ending rabbit hole. For now, we'll just use the 'quick and easy' approach provided by the **lmerTest** package seen in the lectures.  

Using the **lmerTest** package, re-fit your model, and you should now get some p-values! 


::: {.callout-tip collapse="true"}
#### Hints

If you use `library(lmerTest)` to load the package, then *every single* model you fit will show p-values calculated with the Satterthwaite method.  
Personally, I would rather this is not the case, so I often opt to fit specific models with these p-values without ever loading the package:  
`modp <- lmerTest::lmer(y ~ 1 + x + ....`  

:::

::: {.callout-caution collapse="true"}
#### optional: a model comparison

If we want to go down the model comparison route, we just need to isolate the relevant part(s) of the model that we are interested in.  

Remember, as we saw in USMR, model comparison is sometimes a useful way of testing a _set_ of coefficients. For instance, in this example the interaction involves estimating _two_ terms: 
`audiomusic:headphonesanc_headphones` and `audiowhite_noise:headphonesanc_headphones`.  

To test the interaction as a whole, we can create a model without the interaction, and then compare it. The `SATmodcomp()` function from the __pbkrtest__ package provides a way of conducting an F test with the same Satterthwaite method of approximating the degrees of freedom:  
  
```{r}
sdmt_mod <- lmer(SDMT ~ audio * headphones + 
              (1 + audio | PID), data = efrep)
sdmt_res <- lmer(SDMT ~ audio + headphones + 
                   (1 + audio | PID), data = efrep)
library(pbkrtest)
SATmodcomp(largeModel = sdmt_mod, smallModel = sdmt_res)
```

:::



`r qend()`

`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
sdmt_mod <- lmerTest::lmer(SDMT ~ audio * headphones + 
              (1 + audio | PID), data = efrep)

summary(sdmt_mod)
```

`r solend()`


`r qbegin(qcounter())`

We've already seen in the example with the toys (above) that we can visualise the fitted values (model predictions) using things like `augment()` from the __broom.mixed__ package. But these were plotting all the cluster-specific values (i.e. our random effects), and what we are really interested in are the estimates of (and uncertainty around) our fixed effects.  

Using tools like the __effects__ package can provide us with the values of the outcome across levels of a specific fixed predictor (holding other predictors at their mean).   

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
library(effects)
effect(term = "audio*headphones", mod = sdmt_mod) |>
  as.data.frame() |>
  ggplot(aes(x=audio,y=fit,
             ymin=lower,ymax=upper,
             col=headphones))+
  geom_pointrange(size=1,lwd=1)
```

`r solend()`


`r qbegin(qcounter())`
Now we have some p-values and a plot, try to create a short write-up of the analysis and results.   

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`




```{r}
#| echo: false
res = as.data.frame(parameters::model_parameters(sdmt_mod, ci_method="s"))
res[,c(2,3,5,6,7,8)] <- apply(res[,c(2,3,5,6,7,8)], 2, function(x) round(x, 2))
res[,9] <- format.pval(res[,9],eps=.001,digits=2)
res[,9][!grepl("<",res[,9])] <- paste0("=",res[,9][!grepl("<",res[,9])])
```

:::int
SDMT scores were modelled using linear mixed effects regression, with fixed effects of audio-type (no audio/white noise/music, treatment coded with no audio as the reference level), audio delivery (speakers/ANC-headphones, treatment coded with speakers as the reference level) and their interaction. Participant-level random intercepts and random slopes of audio-type were also included. The model was fitted using the **lme4** package in R, and estimated with restricted estimation maximum likelihood (REML). Denominator degrees of freedom for all tests were approximated using the Satterthwaite method.  

Inclusion of the interaction between headphones and audio-type was found to improve model fit ($F(2, 26.9) = 11.05, p < .001$), suggesting that the interference of different types of audio on executive functioning is dependent upon whether the audio is presented through ANC-headphones or through speakers.  
Participants not wearing headphones and presented with no audio scored on average `r res[1,2]` on the SDMT. Listening to music via speakers was associated with lower scores ($b = `r res[3,2]`, t(`r res[3,8]`)=`r res[3,7]`, p `r res[3,9]`$) compared to no audio. White noise played via speakers was not associated with a difference in performance on the SDMT compared to no audio.  

Without any audio playing, wearing ANC-headphones was associated with higher SDMT scores compared to no headphones ($b = `r res[4,2]`, t(`r res[4,8]`)=`r res[4,7]`, p `r res[4,9]`$). This difference between headphones and speakers was also evident when listening to white-noise ($b = `r res[5,2]`, t(`r res[5,8]`)=`r res[5,7]`, p `r res[5,9]`$). The apparent detrimental influence of music was not found to differ depending on whether headphones were worn ($b = `r res[6,2]`, p `r res[6,9]`$). 

These results suggest that while music appears to interfere with executive functioning (resulting in lower SDMT scores) regardless of whether it is heard through headphones or speakers, listening to white noise may actually improve executive functioning, but only when presented via headphones. Furthermore, there appears to be benefits for executive functioning from wearing ANC-headphones even when not-listening to audio, perhaps due to the noise cancellation. The pattern of findings are displayed in @fig-efplot.  


```{r}
#| label: fig-efplot
#| fig-cap: "Interaction between the type (no audio/white noise/music) and the delivery (speakers/ANC headphones) on executive functioning task (SDMT)"
#| echo: false
plotfit <- effect(term = "audio*headphones", mod = sdmt_mod) |>
  as.data.frame()

ggplot(efrep, aes(x=audio,y=SDMT,col=headphones))+
  geom_jitter(height=0,width=.2,alpha=.3) +
  geom_pointrange(data = plotfit, 
                  aes(y=fit,ymin=lower,ymax=upper),
                  size=1,lwd=1) 
```
:::
`r solend()`








