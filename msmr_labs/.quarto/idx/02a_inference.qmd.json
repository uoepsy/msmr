{"title":"2A: Inference for MLM","markdown":{"yaml":{"title":"2A: Inference for MLM","params":{"SHOW_SOLS":false,"TOGGLE":true},"editor_options":{"chunk_output_type":"console"}},"headingText":"Inference","containsRefs":false,"markdown":"\n\n```{r}\n#| label: setup\n#| include: false\nsource('assets/setup.R')\nlibrary(xaringanExtra)\nlibrary(tidyverse)\nlibrary(patchwork)\nxaringanExtra::use_panelset()\n```\n\n:::lo\nThis reading:  \n\nConducting inference (i.e. getting confidence intervals or p-values, model comparisons) for MLMs can be tricky partly because there are a variety of different methods that have been developed.  \nThis reading briefly explains why getting p-values from `lmer()` is not as easy as it was for `lm()`, before giving an outline of some of the main approaches people tend to take. Don't feel like you have to remember all of these, just be aware that they exist, and refer back to this page whenever you need to.  \n\n\n:::\n\n\nThe term \"inference\" is used to refer to the process of moving from beyond a description of our specific sample to being able to make statements about the broader population from which we have sampled. \n\nIn the framework for statistics that we have been learning, this centers on the idea of _sample statistics that we might see in the long run_ (i.e. if we did the experiment again and again and again with a new sample each time, see @fig-se3). In USMR, we saw various ways in which this logic was applied, combining the observed sample statistic with the standard error to create a _test statistic_ ($z$, $t$, $\\chi^2$, $F$, then compared to the appropriate standard distribution). \n\n```{r}\n#| echo: false\n#| label: fig-se3\n#| fig-cap: \"The standard error is the standard deviation of the 'sampling distribution' - the distribution of sample statistics that we _could_ see. We use this to ask how likely we are to see our observed sample in a universe where the null hypothesis is true. This probability gives us reason to reject (or not) said null hypothesis.\"\n#| fig-height: 3.5\nset.seed(2394)\nsamplemeans <- seq(-5,5,.1)\ng <- ggplot(data=tibble(samplemeans),aes(x=samplemeans))+\n  #geom_histogram(alpha=.3)+\n  stat_function(geom=\"line\",fun=~dnorm(.x, mean=0,sd=1),lwd=1)\n\n\nld <- layer_data(g) |> filter(x <= 1 & x >= -1)\nld2 <- layer_data(g) |> filter(x <= 2 & x >= -2)\nld3 <- layer_data(g) |> filter(x >= 2.5)\n\ng + geom_area(data=ld,aes(x=x,y=y),fill=\"grey30\",alpha=.3) + \n  geom_area(data=ld2,aes(x=x,y=y),fill=\"grey30\",alpha=.1) +\n  geom_area(data=ld3,aes(x=x,y=y),fill=\"red\",alpha=.1) +\n  geom_vline(xintercept=2.5,col=\"red\")+\n  annotate(\"text\",x=3,y=.3,label=\"observed\\nsample statistic\",col=\"red\",hjust=0,vjust=0)+\n  geom_curve(aes(x=3, xend=2.5, y=.3, yend=.2), col=\"red\", size=0.5, \n             curvature = 0, arrow = arrow(length = unit(0.03, \"npc\")))+\n  geom_vline(xintercept = 0, col=\"black\",lty=\"dashed\", lwd=.5) +\n  annotate(\"text\",\n           x=-2, y=.3, \n           label=\"Null Hypothesis\", col=\"black\",\n           hjust=1)+\n  geom_curve(aes(x=-2, xend=0, y=.3, yend=.3), col=\"black\", size=0.5, \n             curvature = 0, arrow = arrow(length = unit(0.03, \"npc\")))+\n  \n  geom_segment(x=0,xend=-1,y=.15,yend=.15) +\n  annotate(\"text\",x=-3.5, y=.16, label=\"Standard Error (SE)\\n(standard deviation of\\nsampling distribution)\", col=\"grey30\")+\n  geom_curve(aes(x=-2.3, xend=-.5, y=.2, yend=.15), col=\"grey30\", size=0.5, curvature = -0.3, arrow = arrow(length = unit(0.03, \"npc\")))+\n\n  scale_y_continuous(NULL,breaks=NULL)+\n  theme_minimal()+\n  scale_x_continuous(\"sample means under the null hypothesis\",breaks=NULL) \n  \n  \n\n```\n\nIn the linear models we were fitting with `lm()`, these were $t$ (for the coefficient estimate) and $F$ (the reduction in residual sums of squares) tests, and accordingly they had an associated degrees of freedom. If we fit a linear model `lm(y~x)` to 10 datapoints, then our tests would have $10-2=8$^[$n$ observations minus $k$ parameters (slope of `x`) minus 1 intercept] degrees of freedom, and test statistics would be compared against, e.g. a $t$ distribution with 8 degrees of freedom. Alternatively, if we were to fit that model to 100 datapoints, we would be working with 98 degrees of freedom. The degrees of freedom reflects the fact that there is more variability in statistics from smaller samples. Another way of thinking of degrees of freedom is that they are the number of independent datapoints that are left \"free to vary\" around our model parameters. \n\nBut we are now working with multilevel data, and in the scenario where we have, e.g. $n_p$ pupils clustered into $n_s$ schools, how many independent bits of information do we have to begin with? Is it $n_p$? Or $n_s$? Or somewhere in between? Our random effects are not \"free to vary\" in the sense that they are estimated under certain constraints (such as following a normal distribution).  \n\nIn very specific situations that correspond to classical experimental designs (in which, e.g., we have perfectly balanced numbers across experimental factors and equal sizes within groups) it is possible to conduct similar $F$ tests (and hence $t$-tests too) with a known degrees of freedom. Unfortunately, transferring this to more general scenarios is problematic (e.g., any missing data, unbalanced designs, more complex random effect structures). Partly because defining the necessarily follow an $F$ distribution with _any_ degrees of freedom. It is for these reasons that the author of the __lme4__   \n\nHowever, there are various strategies that we can use to conduct inferences that either attempt to approximate the degrees of freedom, or use an alternative method based on, e.g., likelihoods or bootstrapping.  \n\nBelow, we'll go through each method in R, applying it to the following model (recall this is the model we ended with in reading [1B](01b_lmm.html#a-more-complex-model){target=\"_blank\"}).  \n```{r}\nlibrary(tidyverse)\nlibrary(lme4)\n\nschoolmot <- read_csv(\"https://uoepsy.github.io/data/schoolmot.csv\")\n\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot)\n```\n\n::: {.callout-note collapse=\"true\"}\n#### df approximations (Satterthwaite)\n\nTwo methods have been suggested as approximations for the denominator degrees of freedom for multilevel models. The maths behind these are pretty intense, so we're going to focus on how to implement them in R, and emphasise some of their respective benefits/drawbacks.  \n\nThe Satterthwaite approximation is easily implemented by packages such as __lmerTest__. This package simply overwrites the `lmer()` function to use a version that has the degrees of freedom and associated p-values displayed in the summary.  \n\nIt can be used for models fitted with either ML or REML, and generally scales well, so if you are fitting models to big datasets, it won't take too much extra time.  \n\n::::panelset\n:::panel\n#### tests of single parameters\n\n```{r}\nsmod3sat <- lmerTest::lmer(grade ~ motiv * funding + \n                (1 + motiv | schoolid), \n              data = schoolmot)\nsummary(smod3sat)\n```\n\n:::int\n__Reporting__  \n\n... degrees of freedom in the coefficients tests have been corrected via Satterthwaite's method.   \n...   \n...   \nThe association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.85 point increase for children in state school in comparison to those attending private schools ($b = 2.85,\\ SE = 1.06,\\ t(26.54^*) = 2.69,\\ p = .012$).\n\n:::\n\n\n\n:::\n:::panel\n#### model comparisons\n\nYou can conduct model comparisons with an $F$ test and the Satterthwaite df approximation using the function `SATmodcomp()` from the __pbkrtest__ package:  \n\n```{r}\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot)\nlibrary(pbkrtest)\nSATmodcomp(largeModel = smod3, smallModel = smod3_res)\n```\n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit ($F(1,26.54^*)=7.23, p=.012$, with degrees of freedom approximated using the Satterthwaite method).  \n\n:::\n\n\n:::\n::::\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### df approximations (Kenward Rogers)  \n\nThe Kenward Rogers (KR) approximation involves a correcting the standard errors for small samples, and then approximating the degrees of freedom similarly to Satterthwaite. Because the standard errors are adjusted in KR, $t$-statistics will be slightly different too. \n\nThe KR approach is generally a good option for smaller sample sizes. The adjustment for smaller samples in KR relies on estimates obtained via REML, which means that to use this method we must fit models with `REML=TRUE`. \nOne thing to note is that the calculation can be computationally demanding, and so as n increases, it will take more and more time to implement.  \n\n::::panelset\n:::panel\n#### tests of single parameters\n\nWe can use the __parameters__ package to get out tests of coefficients using the KR method. It displays both confidence intervals and p-values:  \n```{r}\nlibrary(parameters)\nmodel_parameters(smod3, ci_method=\"kr\")\n```\n\n:::int\n__Reporting__  \n\n... standard errors and degrees of freedom for the coefficients tests have been corrected via the Kenward Rogers method.   \n...   \n...   \nThe association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.85 point increase for children in state school in comparison to those attending private schools ($b = 2.85,\\ SE = 1.07,\\ t(28.79^*) = 2.67,\\ p = .012$).\n\n:::\n\n\n:::\n:::panel\n#### model comparisons\n\nAnd the __pbkrtest__ package allows for the model comparison:  \n```{r}\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot, REML=TRUE)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot, REML=TRUE)\nlibrary(pbkrtest)\nKRmodcomp(largeModel = smod3, smallModel = smod3_res)\n```\n\n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit ($F(1,28.79^*)=7.12, p=.012$, with degrees of freedom approximated using the Kenward Rogers method).  \n\n:::\n\n\n:::\n::::\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### likelihood based methods \n\nRemember that multilevel models are typically fitted using maximum likelihood estimation - i.e. a process that iteratively tries to find the set of estimates that result in the greatest probability of observing the data that we have observed (@fig-mlee).  \n\n```{r}\n#| label: fig-mlee\n#| fig-cap: \"likelihood is the probability of observing the data, given some model\"\n#| out-height: \"200px\"\n#| out-wight: \"200px\"\n#| echo: false\nknitr::include_graphics(\"images/mle_single.png\")\n```\n\nThere are two main things to be aware of with likelihood based methods.    \n\n- Because these methods rely on the likelihood, then in in order to assess significance of fixed effects, models must be fitted with `REML=FALSE` (functions like `anova()` and `confint()` shown below will re-fit models for you!). This is because when using REML, the likelihood is indexing the fit of the random effects only. \n\n- Comparisons of two likelihoods (i.e. likelihood ratio tests) are only __asymptotically__ $\\chi^2$ distributed (i.e. as $n \\rightarrow \\infty$), meaning that that this may not be appropriate for smaller sample sizes.  \n\n\n::::panelset\n:::panel\n#### likelihood ratio tests (LRT)\n\nIf we consider two competing models, e.g., one with an interaction in it and one without, then we can examine how the inclusion of the model changes the likelihood of seeing our data.  \n\n```{r}\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot, REML = FALSE)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot, REML = FALSE)\nanova(smod3_res, smod3) # a likelihood ratio test!  \n```\n\nWe can see the (log)likelihood of the two models, which have been multiplied by -2 to get \"deviance\", and the _difference_ in the deviance is under the 'Chisq' column of the output, with the associated degrees of freedom (how many parameters we've added) under the 'Df' column. Differences in two deviances are asymptotically $\\chi^2$ distributed, and under this assumption we can compare the change in deviance between our two models to the appropriate $\\chi^2$ distribution in order to obtain a p-value.  \n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit, as indicated by a likelihood ratio test ($\\chi^2(1)=6.84,p=.009$). \n:::\n\n\n:::\n:::panel\n#### profile likelihood confidence intervals\n\nAnother way in which we can use likelihoods is to construct confidence intervals around each parameter. Rather than simply comparing two distinct likelihoods (i.e. two models), we can create a profile of the curvature of the likelihood surface around an estimate when holding other parameters constant. If the curvature is sharp, we have more certainty in the estimate, whereas if it is gradual, we have less certainty. We can use this to create confidence intervals. \n\n```{r}\nconfint(smod3, method = \"profile\")\n```\n\n:::int\n__Reporting__  \n\n... the association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.8 point increase for children in state school in comparison to those attending private schools ($b = 2.8$, 95% profile likelihood CI $[0.75, 4.90]$).\n\n:::\n\n:::\n::::\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### parametric bootstrap\n\nThere are also various \"bootstrapping\" methods which it is worth looking into. Think back to USMR when we first learned about hypothesis testing. Remember that we did some simulating of data, so that we could compare what we actually observe with what we would expect if the null hypothesis were true? By doing this, we were essentially _creating_ a null distribution, so that calculating a p-value can become an issue of summarising data (e.g. calculate the proportion of our simulated null distribution that is more extreme than our observed statistic).  \n\nWe can use this same logic to perform tests or construct confidence intervals for multilevel models. However, this particular flavour of _parametric_ bootstrapping does not involve resampling with replacement from our data. Instead, it involves 1) simulating data from our model parameters, then 2) fitting model(s) to that simulated data to get an estimate, then 3) using the distribution of estimates obtained from doing steps 1 and 2 a thousand times.  \n\nSome key things to note:\n\n- This can be time consuming! and might not work well depending on how stable your random effect variances are (i.e. if some variance estimates are close to 0, some of the bootstrap iterations may fail).  \n- Parametric bootstrapping has all the normal assumptions of the multilevel model (which we'll learn about next week) - by simulating from the model, we're assuming the model distributions ($\\zeta_{0i} \\sim N(0,\\sigma_0)$, $\\varepsilon \\sim N(0,\\sigma_e)$ etc.) are correct. \n\n::::panelset\n:::panel\n#### parametric bootstrapped likelihood ratio test\n\nInstead of assuming that the likelihood ratio test statistics are $\\chi^2$-distributed, we can bootstrap this test instead. This approach simulates data from the simpler model, fits both the simple model and the complex model and evaluates the change in log-likelihood. By doing this over and over again, we build a distribution of what changes in log-likelihood we would be likely to see if the more complex model is not any better. In this way it actually constructs a distribution reflecting our null hypothesis, against which we can then compare our actual observed effect:  \n\nThe __pbkrtest__ package does this for us:  \n```{r}\n#| eval: false\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot)\nlibrary(pbkrtest)\nPBmodcomp(largeModel = smod3, smallModel = smod3_res)\n```\n```{r}\n#| echo: false\nlibrary(pbkrtest)\nload(\"data/pbres.rdata\")\npbres\n```\n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit, as indicated by a parametric bootstrapped likelihood ratio test ($\\Delta2LL=6.84,p=.013$). \n:::\n\n\n\n:::\n:::panel\n#### parametric bootstrapped CIs\n\nWe can easily get parametric bootstrapped confidence intervals from `confint()`:  \n\n```{r}\n#| eval: false\nconfint(smod3, method=\"boot\")\n```\n```{r}\n#| echo: false\nload(\"data/pbci.rdata\")\npbci\n```\n\n:::int\n__Reporting__  \n\n... the association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.8 point increase for children in state school in comparison to those attending private schools ($b = 2.8$, 95% parametric bootstrapped CI $[0.69, 5.06]$).\n\n:::\n\n:::\n\n::::\n\n:::\n\n\n\n## Summary\n\n\n|  | df approximations | likelihood based | parametric bootstrap |\n| ---- | ---- | ---- | ---- |\n| tests/CIs of individual parameters | Tests of individual parameters can be done by refitting with `lmerTest::lmer(...)` for the Satterthwaite (S) method, or using `parameters::model_parameters(model, ci_method=\"kr\")` for Kenward Rogers (KR). | Profile likelihood CIs for individual parameters can be obtained via `confint(m, method=\"profile\")`, but this can be computationally demanding. | Parametric Bootstrapped CIs for individual parameters can be obtained via `confint(m, method=\"boot\")` |\n| model comparisons<br><small>(different fixed effects, same random effects)</small> | Comparisons of models that differ _only_ in their fixed effects can be done via $F$ tests in the __pbkrtest__ package:<br>`SATmodcomp(m2, m1)` for S and `KRmodcomp(m2, m1)` for KR. | Comparisons of models that differ _only_ in their fixed effects can be done via LRT using `anova(m1, m2)` | Comparisons of models that differ _only_ in their fixed effects can be done via a bootstrapped LRT using `PBmodcomp(m2, m1)` from the __pbkrtest__ package. |\n|  | For KR, models must be fitted with `REML=TRUE` (a good option for small samples). For S, models can be fitted with either. | For likelihood based methods for fixed effects, models must be fitted with `REML=FALSE`.<br>Likelihood based methods are asymptotic (i.e. hold when $n \\rightarrow \\infty$). Best avoided with smaller sample sizes (i.e. a small number of clusters)  | Time consuming, but considered best available method (can be problematic with unstable models) |\n\n\n\n::: {.callout-caution collapse=\"true\"}\n#### optional: testing random effects?\n\nTests of random effects are difficult because the null hypothesis (the random effect variance is zero) lies on a boundary (you can't have a negative variance). Comparisons of models that differ _only_ in their random effects can be done by comparing ratio of likelihoods when fitted with `REML=TRUE` (this has to be done manually), but these tests should be treated with caution.   \n\nWe _can_ obtain confidence intervals for our random effect variances using both the profile likelihood and the parametric boostrap methods discussed above.  \n\nAs random effects are typically part of the experimental design, there is often little need to test their significance. In most cases, the maximal random effect structure can be conceptualised without reference to the data or any tests, and the inclusion/exclusion of specific random effects is more a matter of what simplifications are required for the model to converge. Inclusion/exclusion of parameters based on significance testing is rarely, if ever a sensible approach.  \n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":"\n\n```{r}\n#| label: setup\n#| include: false\nsource('assets/setup.R')\nlibrary(xaringanExtra)\nlibrary(tidyverse)\nlibrary(patchwork)\nxaringanExtra::use_panelset()\n```\n\n:::lo\nThis reading:  \n\nConducting inference (i.e. getting confidence intervals or p-values, model comparisons) for MLMs can be tricky partly because there are a variety of different methods that have been developed.  \nThis reading briefly explains why getting p-values from `lmer()` is not as easy as it was for `lm()`, before giving an outline of some of the main approaches people tend to take. Don't feel like you have to remember all of these, just be aware that they exist, and refer back to this page whenever you need to.  \n\n\n:::\n\n# Inference\n\nThe term \"inference\" is used to refer to the process of moving from beyond a description of our specific sample to being able to make statements about the broader population from which we have sampled. \n\nIn the framework for statistics that we have been learning, this centers on the idea of _sample statistics that we might see in the long run_ (i.e. if we did the experiment again and again and again with a new sample each time, see @fig-se3). In USMR, we saw various ways in which this logic was applied, combining the observed sample statistic with the standard error to create a _test statistic_ ($z$, $t$, $\\chi^2$, $F$, then compared to the appropriate standard distribution). \n\n```{r}\n#| echo: false\n#| label: fig-se3\n#| fig-cap: \"The standard error is the standard deviation of the 'sampling distribution' - the distribution of sample statistics that we _could_ see. We use this to ask how likely we are to see our observed sample in a universe where the null hypothesis is true. This probability gives us reason to reject (or not) said null hypothesis.\"\n#| fig-height: 3.5\nset.seed(2394)\nsamplemeans <- seq(-5,5,.1)\ng <- ggplot(data=tibble(samplemeans),aes(x=samplemeans))+\n  #geom_histogram(alpha=.3)+\n  stat_function(geom=\"line\",fun=~dnorm(.x, mean=0,sd=1),lwd=1)\n\n\nld <- layer_data(g) |> filter(x <= 1 & x >= -1)\nld2 <- layer_data(g) |> filter(x <= 2 & x >= -2)\nld3 <- layer_data(g) |> filter(x >= 2.5)\n\ng + geom_area(data=ld,aes(x=x,y=y),fill=\"grey30\",alpha=.3) + \n  geom_area(data=ld2,aes(x=x,y=y),fill=\"grey30\",alpha=.1) +\n  geom_area(data=ld3,aes(x=x,y=y),fill=\"red\",alpha=.1) +\n  geom_vline(xintercept=2.5,col=\"red\")+\n  annotate(\"text\",x=3,y=.3,label=\"observed\\nsample statistic\",col=\"red\",hjust=0,vjust=0)+\n  geom_curve(aes(x=3, xend=2.5, y=.3, yend=.2), col=\"red\", size=0.5, \n             curvature = 0, arrow = arrow(length = unit(0.03, \"npc\")))+\n  geom_vline(xintercept = 0, col=\"black\",lty=\"dashed\", lwd=.5) +\n  annotate(\"text\",\n           x=-2, y=.3, \n           label=\"Null Hypothesis\", col=\"black\",\n           hjust=1)+\n  geom_curve(aes(x=-2, xend=0, y=.3, yend=.3), col=\"black\", size=0.5, \n             curvature = 0, arrow = arrow(length = unit(0.03, \"npc\")))+\n  \n  geom_segment(x=0,xend=-1,y=.15,yend=.15) +\n  annotate(\"text\",x=-3.5, y=.16, label=\"Standard Error (SE)\\n(standard deviation of\\nsampling distribution)\", col=\"grey30\")+\n  geom_curve(aes(x=-2.3, xend=-.5, y=.2, yend=.15), col=\"grey30\", size=0.5, curvature = -0.3, arrow = arrow(length = unit(0.03, \"npc\")))+\n\n  scale_y_continuous(NULL,breaks=NULL)+\n  theme_minimal()+\n  scale_x_continuous(\"sample means under the null hypothesis\",breaks=NULL) \n  \n  \n\n```\n\nIn the linear models we were fitting with `lm()`, these were $t$ (for the coefficient estimate) and $F$ (the reduction in residual sums of squares) tests, and accordingly they had an associated degrees of freedom. If we fit a linear model `lm(y~x)` to 10 datapoints, then our tests would have $10-2=8$^[$n$ observations minus $k$ parameters (slope of `x`) minus 1 intercept] degrees of freedom, and test statistics would be compared against, e.g. a $t$ distribution with 8 degrees of freedom. Alternatively, if we were to fit that model to 100 datapoints, we would be working with 98 degrees of freedom. The degrees of freedom reflects the fact that there is more variability in statistics from smaller samples. Another way of thinking of degrees of freedom is that they are the number of independent datapoints that are left \"free to vary\" around our model parameters. \n\nBut we are now working with multilevel data, and in the scenario where we have, e.g. $n_p$ pupils clustered into $n_s$ schools, how many independent bits of information do we have to begin with? Is it $n_p$? Or $n_s$? Or somewhere in between? Our random effects are not \"free to vary\" in the sense that they are estimated under certain constraints (such as following a normal distribution).  \n\nIn very specific situations that correspond to classical experimental designs (in which, e.g., we have perfectly balanced numbers across experimental factors and equal sizes within groups) it is possible to conduct similar $F$ tests (and hence $t$-tests too) with a known degrees of freedom. Unfortunately, transferring this to more general scenarios is problematic (e.g., any missing data, unbalanced designs, more complex random effect structures). Partly because defining the necessarily follow an $F$ distribution with _any_ degrees of freedom. It is for these reasons that the author of the __lme4__   \n\nHowever, there are various strategies that we can use to conduct inferences that either attempt to approximate the degrees of freedom, or use an alternative method based on, e.g., likelihoods or bootstrapping.  \n\nBelow, we'll go through each method in R, applying it to the following model (recall this is the model we ended with in reading [1B](01b_lmm.html#a-more-complex-model){target=\"_blank\"}).  \n```{r}\nlibrary(tidyverse)\nlibrary(lme4)\n\nschoolmot <- read_csv(\"https://uoepsy.github.io/data/schoolmot.csv\")\n\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot)\n```\n\n::: {.callout-note collapse=\"true\"}\n#### df approximations (Satterthwaite)\n\nTwo methods have been suggested as approximations for the denominator degrees of freedom for multilevel models. The maths behind these are pretty intense, so we're going to focus on how to implement them in R, and emphasise some of their respective benefits/drawbacks.  \n\nThe Satterthwaite approximation is easily implemented by packages such as __lmerTest__. This package simply overwrites the `lmer()` function to use a version that has the degrees of freedom and associated p-values displayed in the summary.  \n\nIt can be used for models fitted with either ML or REML, and generally scales well, so if you are fitting models to big datasets, it won't take too much extra time.  \n\n::::panelset\n:::panel\n#### tests of single parameters\n\n```{r}\nsmod3sat <- lmerTest::lmer(grade ~ motiv * funding + \n                (1 + motiv | schoolid), \n              data = schoolmot)\nsummary(smod3sat)\n```\n\n:::int\n__Reporting__  \n\n... degrees of freedom in the coefficients tests have been corrected via Satterthwaite's method.   \n...   \n...   \nThe association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.85 point increase for children in state school in comparison to those attending private schools ($b = 2.85,\\ SE = 1.06,\\ t(26.54^*) = 2.69,\\ p = .012$).\n\n:::\n\n\n\n:::\n:::panel\n#### model comparisons\n\nYou can conduct model comparisons with an $F$ test and the Satterthwaite df approximation using the function `SATmodcomp()` from the __pbkrtest__ package:  \n\n```{r}\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot)\nlibrary(pbkrtest)\nSATmodcomp(largeModel = smod3, smallModel = smod3_res)\n```\n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit ($F(1,26.54^*)=7.23, p=.012$, with degrees of freedom approximated using the Satterthwaite method).  \n\n:::\n\n\n:::\n::::\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### df approximations (Kenward Rogers)  \n\nThe Kenward Rogers (KR) approximation involves a correcting the standard errors for small samples, and then approximating the degrees of freedom similarly to Satterthwaite. Because the standard errors are adjusted in KR, $t$-statistics will be slightly different too. \n\nThe KR approach is generally a good option for smaller sample sizes. The adjustment for smaller samples in KR relies on estimates obtained via REML, which means that to use this method we must fit models with `REML=TRUE`. \nOne thing to note is that the calculation can be computationally demanding, and so as n increases, it will take more and more time to implement.  \n\n::::panelset\n:::panel\n#### tests of single parameters\n\nWe can use the __parameters__ package to get out tests of coefficients using the KR method. It displays both confidence intervals and p-values:  \n```{r}\nlibrary(parameters)\nmodel_parameters(smod3, ci_method=\"kr\")\n```\n\n:::int\n__Reporting__  \n\n... standard errors and degrees of freedom for the coefficients tests have been corrected via the Kenward Rogers method.   \n...   \n...   \nThe association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.85 point increase for children in state school in comparison to those attending private schools ($b = 2.85,\\ SE = 1.07,\\ t(28.79^*) = 2.67,\\ p = .012$).\n\n:::\n\n\n:::\n:::panel\n#### model comparisons\n\nAnd the __pbkrtest__ package allows for the model comparison:  \n```{r}\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot, REML=TRUE)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot, REML=TRUE)\nlibrary(pbkrtest)\nKRmodcomp(largeModel = smod3, smallModel = smod3_res)\n```\n\n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit ($F(1,28.79^*)=7.12, p=.012$, with degrees of freedom approximated using the Kenward Rogers method).  \n\n:::\n\n\n:::\n::::\n\n:::\n\n\n::: {.callout-note collapse=\"true\"}\n#### likelihood based methods \n\nRemember that multilevel models are typically fitted using maximum likelihood estimation - i.e. a process that iteratively tries to find the set of estimates that result in the greatest probability of observing the data that we have observed (@fig-mlee).  \n\n```{r}\n#| label: fig-mlee\n#| fig-cap: \"likelihood is the probability of observing the data, given some model\"\n#| out-height: \"200px\"\n#| out-wight: \"200px\"\n#| echo: false\nknitr::include_graphics(\"images/mle_single.png\")\n```\n\nThere are two main things to be aware of with likelihood based methods.    \n\n- Because these methods rely on the likelihood, then in in order to assess significance of fixed effects, models must be fitted with `REML=FALSE` (functions like `anova()` and `confint()` shown below will re-fit models for you!). This is because when using REML, the likelihood is indexing the fit of the random effects only. \n\n- Comparisons of two likelihoods (i.e. likelihood ratio tests) are only __asymptotically__ $\\chi^2$ distributed (i.e. as $n \\rightarrow \\infty$), meaning that that this may not be appropriate for smaller sample sizes.  \n\n\n::::panelset\n:::panel\n#### likelihood ratio tests (LRT)\n\nIf we consider two competing models, e.g., one with an interaction in it and one without, then we can examine how the inclusion of the model changes the likelihood of seeing our data.  \n\n```{r}\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot, REML = FALSE)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot, REML = FALSE)\nanova(smod3_res, smod3) # a likelihood ratio test!  \n```\n\nWe can see the (log)likelihood of the two models, which have been multiplied by -2 to get \"deviance\", and the _difference_ in the deviance is under the 'Chisq' column of the output, with the associated degrees of freedom (how many parameters we've added) under the 'Df' column. Differences in two deviances are asymptotically $\\chi^2$ distributed, and under this assumption we can compare the change in deviance between our two models to the appropriate $\\chi^2$ distribution in order to obtain a p-value.  \n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit, as indicated by a likelihood ratio test ($\\chi^2(1)=6.84,p=.009$). \n:::\n\n\n:::\n:::panel\n#### profile likelihood confidence intervals\n\nAnother way in which we can use likelihoods is to construct confidence intervals around each parameter. Rather than simply comparing two distinct likelihoods (i.e. two models), we can create a profile of the curvature of the likelihood surface around an estimate when holding other parameters constant. If the curvature is sharp, we have more certainty in the estimate, whereas if it is gradual, we have less certainty. We can use this to create confidence intervals. \n\n```{r}\nconfint(smod3, method = \"profile\")\n```\n\n:::int\n__Reporting__  \n\n... the association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.8 point increase for children in state school in comparison to those attending private schools ($b = 2.8$, 95% profile likelihood CI $[0.75, 4.90]$).\n\n:::\n\n:::\n::::\n\n\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### parametric bootstrap\n\nThere are also various \"bootstrapping\" methods which it is worth looking into. Think back to USMR when we first learned about hypothesis testing. Remember that we did some simulating of data, so that we could compare what we actually observe with what we would expect if the null hypothesis were true? By doing this, we were essentially _creating_ a null distribution, so that calculating a p-value can become an issue of summarising data (e.g. calculate the proportion of our simulated null distribution that is more extreme than our observed statistic).  \n\nWe can use this same logic to perform tests or construct confidence intervals for multilevel models. However, this particular flavour of _parametric_ bootstrapping does not involve resampling with replacement from our data. Instead, it involves 1) simulating data from our model parameters, then 2) fitting model(s) to that simulated data to get an estimate, then 3) using the distribution of estimates obtained from doing steps 1 and 2 a thousand times.  \n\nSome key things to note:\n\n- This can be time consuming! and might not work well depending on how stable your random effect variances are (i.e. if some variance estimates are close to 0, some of the bootstrap iterations may fail).  \n- Parametric bootstrapping has all the normal assumptions of the multilevel model (which we'll learn about next week) - by simulating from the model, we're assuming the model distributions ($\\zeta_{0i} \\sim N(0,\\sigma_0)$, $\\varepsilon \\sim N(0,\\sigma_e)$ etc.) are correct. \n\n::::panelset\n:::panel\n#### parametric bootstrapped likelihood ratio test\n\nInstead of assuming that the likelihood ratio test statistics are $\\chi^2$-distributed, we can bootstrap this test instead. This approach simulates data from the simpler model, fits both the simple model and the complex model and evaluates the change in log-likelihood. By doing this over and over again, we build a distribution of what changes in log-likelihood we would be likely to see if the more complex model is not any better. In this way it actually constructs a distribution reflecting our null hypothesis, against which we can then compare our actual observed effect:  \n\nThe __pbkrtest__ package does this for us:  \n```{r}\n#| eval: false\nsmod3 <- lmer(grade ~ motiv * funding + (1 + motiv | schoolid), \n              data = schoolmot)\nsmod3_res <- lmer(grade ~ motiv + funding + (1 + motiv | schoolid), \n              data = schoolmot)\nlibrary(pbkrtest)\nPBmodcomp(largeModel = smod3, smallModel = smod3_res)\n```\n```{r}\n#| echo: false\nlibrary(pbkrtest)\nload(\"data/pbres.rdata\")\npbres\n```\n\n:::int\n__Reporting__  \n\n... the interaction between motivation level and school funding resulted in a significant improvement in model fit, as indicated by a parametric bootstrapped likelihood ratio test ($\\Delta2LL=6.84,p=.013$). \n:::\n\n\n\n:::\n:::panel\n#### parametric bootstrapped CIs\n\nWe can easily get parametric bootstrapped confidence intervals from `confint()`:  \n\n```{r}\n#| eval: false\nconfint(smod3, method=\"boot\")\n```\n```{r}\n#| echo: false\nload(\"data/pbci.rdata\")\npbci\n```\n\n:::int\n__Reporting__  \n\n... the association between childrens' motivation level and their school grades was moderated by the type of school attended (state/private), with a 1 unit increase in motivation associated with an additional 2.8 point increase for children in state school in comparison to those attending private schools ($b = 2.8$, 95% parametric bootstrapped CI $[0.69, 5.06]$).\n\n:::\n\n:::\n\n::::\n\n:::\n\n\n\n## Summary\n\n\n|  | df approximations | likelihood based | parametric bootstrap |\n| ---- | ---- | ---- | ---- |\n| tests/CIs of individual parameters | Tests of individual parameters can be done by refitting with `lmerTest::lmer(...)` for the Satterthwaite (S) method, or using `parameters::model_parameters(model, ci_method=\"kr\")` for Kenward Rogers (KR). | Profile likelihood CIs for individual parameters can be obtained via `confint(m, method=\"profile\")`, but this can be computationally demanding. | Parametric Bootstrapped CIs for individual parameters can be obtained via `confint(m, method=\"boot\")` |\n| model comparisons<br><small>(different fixed effects, same random effects)</small> | Comparisons of models that differ _only_ in their fixed effects can be done via $F$ tests in the __pbkrtest__ package:<br>`SATmodcomp(m2, m1)` for S and `KRmodcomp(m2, m1)` for KR. | Comparisons of models that differ _only_ in their fixed effects can be done via LRT using `anova(m1, m2)` | Comparisons of models that differ _only_ in their fixed effects can be done via a bootstrapped LRT using `PBmodcomp(m2, m1)` from the __pbkrtest__ package. |\n|  | For KR, models must be fitted with `REML=TRUE` (a good option for small samples). For S, models can be fitted with either. | For likelihood based methods for fixed effects, models must be fitted with `REML=FALSE`.<br>Likelihood based methods are asymptotic (i.e. hold when $n \\rightarrow \\infty$). Best avoided with smaller sample sizes (i.e. a small number of clusters)  | Time consuming, but considered best available method (can be problematic with unstable models) |\n\n\n\n::: {.callout-caution collapse=\"true\"}\n#### optional: testing random effects?\n\nTests of random effects are difficult because the null hypothesis (the random effect variance is zero) lies on a boundary (you can't have a negative variance). Comparisons of models that differ _only_ in their random effects can be done by comparing ratio of likelihoods when fitted with `REML=TRUE` (this has to be done manually), but these tests should be treated with caution.   \n\nWe _can_ obtain confidence intervals for our random effect variances using both the profile likelihood and the parametric boostrap methods discussed above.  \n\nAs random effects are typically part of the experimental design, there is often little need to test their significance. In most cases, the maximal random effect structure can be conceptualised without reference to the data or any tests, and the inclusion/exclusion of specific random effects is more a matter of what simplifications are required for the model to converge. Inclusion/exclusion of parameters based on significance testing is rarely, if ever a sensible approach.  \n\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-in-header":["assets/toggling.html"],"number-sections":false,"output-file":"02a_inference.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","toc_float":true,"link-citations":true,"theme":["united","assets/style-labs.scss"],"title":"2A: Inference for MLM","params":{"SHOW_SOLS":false,"TOGGLE":true},"editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}