---
title: "Week 3 Exercises: Non-Linear Change"
params: 
    SHOW_SOLS: FALSE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
library(ggdist)
xaringanExtra::use_panelset()
qcounter <- function(){
  if(!exists("qcounter_i")){
    qcounter_i <<- 1
  }else{
    qcounter_i <<- qcounter_i + 1
  }
  qcounter_i
}
```

# Cognitive Task Performance

:::frame
__Dataset: Az.rda__  
  
These data are available at [https://uoepsy.github.io/data/Az.rda](https://uoepsy.github.io/data/Az.rda). You can load the dataset using:  
```{r}
load(url("https://uoepsy.github.io/data/Az.rda"))
```
and you will find the `Az` object in your environment.  

The `Az` object contains information on 30 Participants with probable Alzheimer's Disease, who completed 3 tasks over 10 time points: A memory task, and two scales investigating ability to undertake complex activities of daily living (cADL) and simple activities of daily living (sADL). Performance on all of tasks was calculated as a percentage of total possible score, thereby ranging from 0 to 100. 

We're interested in *whether performance on these tasks differed at the outset of the study, and if they differed in their subsequent change in performance*.  

```{r}
#| echo: false
tibble(
    variable = names(Az),
    description = c("Unique Subject Identifier","Time point of the study (1 to 10)","Task type (Memory, cADL, sADL)","Score on test (range 0 to 100)")
) |> gt::gt()
```
:::

`r qbegin(qcounter())`
Load in the data and examine it.  
How many participants, how many observations per participant, per task?  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
load(url("https://uoepsy.github.io/data/Az.rda"))
summary(Az)
```

30 participants: 
```{r}
length(unique(Az$Subject))
```

Does every participant have 10 datapoints for each Task type?  Yes!  
```{r}
any( table(Az$Subject, Az$Task) != 10 )
```

`r solend()`

`r qbegin(qcounter())`
No modelling just yet.  

Plot the performance over time for each type of task.  

Try using `stat_summary` so that you are plotting the means (and standard errors) of each task, rather than every single data point. Why? Because this way you can get a shape of the average trajectories of performance over time in each task.  


::: {.callout-tip collapse="true"}
#### Hints

For an example plot, see [3A #example-in-mlm](03a_poly.html#example-in-mlm){target="_blank"}.

:::


`r qend()` 
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
You can use "pointranges", or "line" and "ribbon".  
`stat_summary` will take the data and for each value of `x` calculate some function (in this case the mean, or the mean and SE):  
```{r}
ggplot(Az, aes(Time, Performance, color=Task, fill=Task)) + 
  stat_summary(fun.data=mean_se, geom="ribbon", color=NA, alpha=0.5) +
  stat_summary(fun=mean, geom="line")
```
`r solend()`

`r qbegin(qcounter())`
Why do you think *raw/natural* polynomials might be more useful than *orthogonal* polynomials for these data?  

::: {.callout-tip collapse="true"}
#### Hints

Are we somewhat interested in group differences (i.e. differences in scores, or differences in rate of change) at *a specific point* in time?  

:::


`r qend()` 
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
Because we're interested in whether there are task differences at the starting point, raw polynomials are probably what we want here.  
`r solend()`


`r qbegin(qcounter())`
Re-center the Time variable so that the intercept is the first timepoint.  
  
Then choose an appropriate degree of polynomial (if any), and fit a full model that allows us to address the research aims.  


::: {.callout-tip collapse="true"}
#### Hints

Note there is no part of the research question that specifically asks about how "gradual" or "quick" the change is (which would suggest we are interested in the quadratic term).  

However, the plot can help to give us a sense of what degree of polynomial terms might be suitable to succinctly describe the trends.  

In many cases, fitting higher and higher order polynomials will likely result in a 'better fit' to our sample data, but these will be worse and worse at generalising to new data - i.e. we run the risk of *overfitting*.  

:::

`r qend()`
`r solbegin(label="1 - how many polynomials?", slabel=F,show=T, toggle=params$TOGGLE)`

In our plot, there were 2 straight line and one slightly curvy one. It wasn't S-shaped or 'wiggly' or anything, there was just a bit of a bend in it, which suggests that the quadratic term could be a good approximation here.   

```{r}
library(lme4)
Az <- Az |> mutate(
  Time1 = Time-1,
  poly1 = poly(Time1,2,raw=T)[,1],
  poly2 = poly(Time1,2,raw=T)[,2]
)
```


::: {.callout-tip collapse="true"}
#### Or using Dan's code:  

```{r}
#| eval: false
# import Dan's code:
source("https://uoepsy.github.io/msmr/functions/code_poly.R")

# this also produces a nice little plot to show the polynomials
Az$Time1 <- Az$Time-1
Az <- code_poly(df = Az, predictor = 'Time1',
                poly.order = 2, orthogonal = FALSE)
```

:::



`r solend()`
`r solbegin(label="2 - fixed effects", slabel=F,show=T, toggle=params$TOGGLE)`

We're interested in how performance changes over time, but we have `poly1` and `poly2` for time, so we're at:  
```
lmer(Performance ~ poly1 + poly2 ... 
```

Our research aims are to investigate differences between task performance (both at baseline and change over time). So we want to interact time with task:  
```
lmer(Performance ~ (poly1 + poly2)*Task ... 
```

`r solend()`
`r solbegin(label="3 - grouping structure", slabel=F,show=T, toggle=params$TOGGLE)`
```{r}
head(Az)
```

We have `r nrow(Az)` observations, and `r table(Az$Subject)[1]` for each participant.  

```
lmer(Performance ~ (poly1 + poly2)*Task ... +
                   (1 + .... | Subject)
```


::: {.callout-tip collapse="true"}
#### Fixed vs Random

We can account for group differences in models either by estimating group differences, or by estimating variance between groups:  

- group as a fixed effect (`y ~ 1 + group`) = groups differ in $y$ by $b_1, b_2, ..., b_k$  
- group as a random effect (`y ~ 1 + (1|group)`) = groups vary in $y$ with a standard deviation of $\sigma_0$   

One way to think about whether a group is best in the random effects part or in the fixed part of our model is to think about "what would happen if I repeated the experiment?"  


| Criterion: | Repetition: <br> _If the experiment were repeated:_ | Desired inference: <br> _The conclusions refer to:_ |
|----------------|--------------------------------------------------|----------------------------------------------------|
| Fixed effects  | <center>Same levels would be used</center>     |    <center>The levels used </center>                                   |
| Random effects | <center>Different levels would be used</center>   | <center>A population from which the levels used<br> are just a (random) sample</center> |


Practical points:  
- Sometimes there isn't enough variability between groups to model as random effects (i.e. the variance gets estimated as too close to zero).
- Sometimes you might not have sufficient number of groups to model as random effects (e.g. for groups of fewer than c8 things, estimates of the variance are often not a reliable reflection of the population).


:::


`r solend()`
`r solbegin(label="4 - random effects", slabel=F,show=T, toggle=params$TOGGLE)`

What slopes could vary by participant? 

__Q:__ Could participants vary in their performance over time?  
__A:__ Yes, `(poly1 + poly2 | Subject)`  
__Q:__ Could participants vary in how performance differs between Tasks?  
__A:__ Yes, `(poly1 + poly2 + Task | Subject)`. E.g., Some participants might be much better at the memory task than other tasks, some might be better at the other tasks.  
__Q:__ Could participants vary in how tasks differ in their performance over time?  
__A:__ Yes, `((poly1 + poly2)*Task | Subject)`. E.g., For some participants, memory could decline more than cADL, for other participants it could decline less.  

```
lmer(Performance ~ (poly1 + poly2)*Task ... +
                   (1 + (poly1 + poly2)*Task | Subject)
```

`r solend()`
`r solbegin(label="5 - the model", slabel=F,show=T, toggle=params$TOGGLE)`

_small note: I'm using the bobyqa optimizer here because it tends to be slightly quicker than the default._  
```{r}
#| eval: false
m1 = lmer(Performance ~ (poly1 + poly2) * Task +
            (1 + (poly1 + poly2) * Task | Subject),
          data=Az, control=lmerControl(optimizer = "bobyqa"))
```
<p style="color:red;font-size:.8em">
boundary (singular) fit: see help('isSingular')<br>
Warning messages:<br>
1: In commonArgs(par, fn, control, environment()) :<br>
  maxfun < 10 * length(par)^2 is not recommended.<br>
2: In optwrap(optimizer, devfun, getStart(start, rho\$pp), lower = rho\$lower,  :<br>
  convergence code 1 from bobyqa: bobyqa -- maximum number of function evaluations exceeded
</p>



`r solend()`

`r qbegin(qcounter())`
Okay, so the model didn't converge.  It's trying to estimate __a lot__ of things in the random effects (even though it didn't converge, try looking at `VarCorr(model)` to see all the covariances it is trying to estimate).  


::: {.callout-tip collapse="true"}
#### Categorical random effects on the RHS

When we have a categorical random effect (i.e. where the `x` in `(1 + x | g)` is a categorical variable), then model estimation can often get tricky, because "the effect of x" for a categorical variable with $k$ levels is identified via $k-1$ parameters, meaning we have a lot of variances and covariances to estimate when we include `x|g`.  

:::: {.columns}
:::{.column width="45%"}

When `x` is numeric:  

```
Groups   Name        Std.Dev. Corr  
g        (Intercept) ...        
         x           ...      ...
Residual             ...     
```

:::
:::{.column width="10%"}

:::
:::{.column width="45%"}

When `x` is categorical with $k$ levels:  

```
Groups   Name        Std.Dev. Corr  
g        (Intercept) ...        
         xlevel2     ...      ...
         xlevel3     ...      ...     ...
         ...         ...      ...     ...     ...
         xlevelk     ...      ...     ...     ...   ...
Residual             ...     
```

:::
::::

However, we can use an alternative formation of the random effects by putting a categorical `x` into the right-hand side:  
Instead of `(1 + x | g)` we can fit `(1 | g) + (1 | g:x)`.   

The symbol `:` in `g:x` is used to refer to the combination of `g` and `x`.  

```{r}
#| echo: false
gx = tibble(
  g = c("p1","p1","p1","...","p2","p2","..."),
  x = c("a","a","b","...","a","b","..."),
  `g:x` = as.character(interaction(g,x))
)
gx[c(4,7),3] <- "..."
gx$g = paste0("  ",gx$g,"   ")
gx$x = paste0("  ",gx$x,"   ")
names(gx)<-c("  g   ","  x   ","g:x")
as.data.frame(gx)
```

It's a bit weird to think about it, but these two formulations of the random effects can kind of represent the same idea:  

- `(1 + x | g)`:  each group of `g` can have a different intercept and a different effect of `x`  
- `(1 | g) + (1 | g:x)`: each group of `g` can have a different intercept, and each level of x within each `g` can have a different intercept.  

Both of these allow the outcome `y` to change across `x` differently for each group in `g` (i.e. both of them result in `y` being different for each level of `x` in each group `g`).  
The first does so explicitly by estimating the group level variance of the `y~x` effect.  
The second one estimates the variance of $y$ between groups, and also the variance of $y$ between 'levels of x within groups'. In doing so, it achieves more or less the same thing, but by capturing these as intercept variances between levels of `x`, we don't have to worry about lots of covariances:  


:::: {.columns}
:::{.column width="45%"}
`(1 + x | g)`  

```
Groups   Name        Std.Dev. Corr  
g        (Intercept) ...        
         xlevel2     ...      ...
         xlevel3     ...      ...     ...
         ...         ...      ...     ...     ...
         xlevelk     ...      ...     ...     ...   ...
Residual             ...     
```

:::
:::{.column width="10%"}

:::
:::{.column width="45%"}
`(1 | g) + (1 | g:x)`  


```
Groups   Name        Std.Dev. 
g        (Intercept) ...        
g.x      (Intercept) ...        
Residual             ...     
```

:::
::::

:::


Try adjusting your model by first moving `Task` to the right hand side of the random effects, and from there starting to simplify things (remove random slopes one-by-one) 

**This is our first experience of our random effect structures becoming more complex than simply `(.... | group)`. This is going to feel confusing, but don't worry, we'll see more structures like this next week.**    


::: {.callout-tip collapse="true"}
#### Hints

`... + (1 + poly1 + poly2 | Subject) + (1 + poly1 + poly2 | Subject:Task)`  

To then start simplifying (if this model doesn't converge), it can be helpful to look at the `VarCorr()` of the non-converging model to see if anything looks awry. Look for small variances, perfect (or near perfect) correlations. These might be sensible things to remove.  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
Here's our model with subject-task effects on the right hand side.  
Again we have problems, as we have a singular fit:  
```{r}
m2 = lmer(Performance ~ (poly1 + poly2) * Task +
            (1 + poly1 + poly2 | Subject) +
            (1 + poly1 + poly2 | Subject:Task),
          data=Az, control=lmerControl(optimizer = "bobyqa"))
```
<p style="color:red;font-size:.8em">boundary (singular) fit: see help('isSingular')</p>

Looking at the random effects of our model, note that the `poly2|Subject` random effect has very little variance (and high correlations).  
Note that it makes sense that by including the random effects for `Subject:Task`, there might not be much above that leftover in `Subject` random effects. 
```{r}
VarCorr(m2)
```


When we remove it, our model converges!!  
```{r}
m3 = lmer(Performance ~ (poly1 + poly2) * Task +
            (1 + poly1 | Subject) +
            (1 + poly1 + poly2 | Subject:Task),
          data=Az, control=lmerControl(optimizer = "bobyqa"))
```

`r solend()`


`r qbegin(qcounter())`

Conduct a series of model comparisons investigating whether 

1. Tasks differ only in their linear change  
2. Tasks differ in their quadratic change  


::: {.callout-tip collapse="true"}
#### Hints

Remember, these sorts of model comparisons are being used to isolate and test part of the fixed effects (we're interested in the how the average participant performs over the study). So our models want to have the same random effect structure, but different fixed effects.  

See the end of [3A #example-in-mlm](03a_poly.html#example-in-mlm){target="_blank"}.  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

As I'm comparing these with a likelihood ratio test, I'll fit them with `REML=FALSE`
```{r}
m3int = lmer(Performance ~ poly1 + poly2 + Task + 
            (1 + poly1 | Subject) +
            (1 + poly1 + poly2 | Subject:Task),
            REML = FALSE,
          data=Az, control=lmerControl(optimizer = "bobyqa"))

m3lin = lmer(Performance ~ poly1*Task + poly2 +
            (1 + poly1 | Subject) +
            (1 + poly1 + poly2 | Subject:Task),
            REML = FALSE,
          data=Az, control=lmerControl(optimizer = "bobyqa"))

m3full = lmer(Performance ~ (poly1 + poly2) * Task +
            (1 + poly1 | Subject) +
            (1 + poly1 + poly2 | Subject:Task),
            REML = FALSE,
          data=Az, control=lmerControl(optimizer = "bobyqa"))

anova(m3int, m3lin, m3full)
```

:::int
```{r}
#| echo: false
res = anova(m3int, m3lin, m3)
```

The linear change over time differs between Tasks ($\chi^2(`r round(res[2,7],2)`) = `r round(res[2,6],2)`, p `r format.pval(res[2,8],eps=.001)`).  
The quadratic change over time differs between Tasks ($\chi^2(`r round(res[3,7],2)`) = `r round(res[3,6],2)`, p `r format.pval(res[3,8],eps=.001)`).  

:::


`r solend()`


`r qbegin(qcounter())`
Get some confidence intervals and provide an interpretation of each coefficient from the full model.  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

As we've used likelihood ratio tests above, we'll get some profile likelihood confidence intervals for our parameters.  
__note this took me about 4 mins to run__  
```{r}
#| eval: false
confint(m3full, method="profile", parm="beta_")
```
```{r}
#| echo: false
# m3.tpr <- profile(m3full, which="beta_")
# save(m3.tpr, file="data/m3tpr.rdata")
load("data/m3tpr.rdata")
m3.ci <- confint(m3.tpr) |> round(2)


broom.mixed::tidy(m3) |>
  filter(effect=="fixed") |>
  transmute(
    term, est=round(estimate,2),
    CI = paste0("[",m3.ci[,1],", ",m3.ci[,2],"]"),
    interpretation = c(
      "estimated score on the cADL task at baseline",
      "estimated linear change in cADL scores from baseline",
      "no significant curvature to the cADL trajectory",
      "no significant difference between sADL and cADL tasks at baseline",
      paste0("at baseline, scores on memory task are ",abs(round(fixef(m3full)[5],2))," lower than cADL"),
      "performance on sADL task is not decreasing from baseline as much as performance on cADL",
      "performance on Memory task is decreasing (linearly) more than performance on cADL",
      "no significant difference between quadratic change of sADL from that of cADL",
      "significant difference in quadratic change between performance on Memory vs performance on cADL"
    )
  ) |> gt::gt()
```



::: {.callout-tip collapse="true"}
#### some tables of predictions (in case they help)

To get a sense of the quadratic term 'in action', think about the predictions across time for each task: 

For cADL, this is just the linear change. Every timepoint, performance decreases by 3.27.  

| timepoint | cADL |
| ---- | ---- |
| prediction formula | $63.88 + (-3.27 \times time) + (0.01 \times time^2)$ |
| prediction formula<br><small>(with non-sig terms removed)</small> | $63.88 + (-3.27 \times time)$ |
| 0 | $63.88 + (-3.27 \times 0) = 63.88$ |
| 1 | $63.88 + (-3.27 \times 1) = 60.61$ |
| 2 | $63.88 + (-3.27 \times 2) = 57.34$ |
| 3 | $63.88 + (-3.27 \times 3) = 54.07$ |


For sADL, the additional change is +1.34, so at every timepoint performance decreases by -1.93 (this is -3.27+1.34)    

| timepoint | sADL |
| ---- | ---- |
| prediction formula | $63.88 + (-3.27 \times time) + (0.01 \times time^2) +$ $(1.44) + (1.34 \times time) + (-0.01 \times time^2)$ |
| prediction formula<br><small>(with non-sig terms removed)</small> | $63.88 + (-3.27 \times time) + (1.34 \times time)$ |
| 0 | $63.88 + (-3.27 \times 0) + (1.34 \times 0) = 63.88$ |
| 1 | $63.88 + (-3.27 \times 1) + (1.34 \times 1) = 61.95$ |
| 2 | $63.88 + (-3.27 \times 2)+ (1.34 \times 2)  = 60.02$ |
| 3 | $63.88 + (-3.27 \times 3)+ (1.34 \times 3) = 58.09$ |


For the Memory task, the quadratic term is in play. at every timepoint performance decreases by $-3.27-3.30 +(0.34 \times time^2)$. So for low timepoints, the quadratic term doesn't make much of a difference as it does for bigger time points.  

| timepoint | Memory |
| ---- | ---- |
| prediction formula | $63.88 + (-3.27 \times time) + (0.01 \times time^2) +$ $(-2.40) + (-3.30 \times time) + (0.34 \times time^2)$ |
| prediction formula<br><small>(with non-sig terms removed)</small> | $63.88 + (-3.27 \times time) +$ $(-2.40) + (-3.30 \times time) + (0.34 \times time^2)$ |
| 0 | $63.88 + (-3.27 \times 0) +$ $(-2.40) + (-3.30 \times 0) + (0.34 \times 0^2) = 61.48$ |
| 1 | $63.88 + (-3.27 \times 1) +$ $(-2.40) + (-3.30 \times 1) + (0.34 \times 1^2) = 55.25$ |
| 2 | $63.88 + (-3.27 \times 2) +$ $(-2.40) + (-3.30 \times 2) + (0.34 \times 2^2) = 49.70$ |
| 3 | $63.88 + (-3.27 \times 3) +$ $(-2.40) + (-3.30 \times 3) + (0.34 \times 3^2) = 44.83$ |
| ... | ... |
| 9 | $63.88 + (-3.27 \times 9) +$ $(-2.40) + (-3.30 \times 9) + (0.34 \times 9^2) = 29.89$ |
| 10 | $63.88 + (-3.27 \times 10) +$ $(-2.40) + (-3.30 \times 10) + (0.34 \times 10^2) = 29.78$ |

:::



`r solend()`


`r qbegin(qcounter())`
Take a piece of paper, and based on your interpretation for the previous question, sketch out the model estimated trajectories for each task.  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
#| echo: false
pp1 <- bind_rows(poly(seq(0,9,length.out=50),2,raw=T) |> as_tibble(),
                 poly(seq(0,9,length.out=50),2,raw=T) |> as_tibble(),
                 poly(seq(0,9,length.out=50),2,raw=T) |> as_tibble()
          ) |>
  mutate(Task=rep(c("cADL","sADL","Memory"),e=50))
names(pp1) <-c("poly1","poly2","Task")
bts = bootMer(m3,FUN=function(x) predict(x,newdata=pp1,re.form=NA),nsim=2)

pp1$pred = predict(m3, newdata=pp1,re.form=NA)
pp1$lwr = apply(bts$t, 2, quantile, .025)
pp1$upr = apply(bts$t, 2, quantile, .975)
ggplot(pp1, aes(x=poly1,y=pred,ymin=lwr,ymax=upr,
                col=Task,fill=Task))+
  geom_line(lwd=1)+
  scale_x_continuous(breaks=0:9)+
  # geom_ribbon(alpha=.2)+
  NULL
```


`r solend()`



`r qbegin(qcounter())`
Make a plot showing both the average performance and the average model predicted performance across time.  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
```{r}
library(broom.mixed)
augment(m3) |>
  ggplot(aes(x=poly1,col=Task))+
  stat_summary(aes(y=Performance), geom="pointrange") + 
  stat_summary(aes(y=.fitted), geom="line")
```
`r solend()`


<!-- # Polynomials and overfitting -->

<!-- :::frame -->
<!-- Two quotes -->

<!-- "all models are wrong. some are useful." [(George Box, 1976)](https://www.tandfonline.com/doi/abs/10.1080/01621459.1976.10480949).   -->

<!-- "...it does not seem helpful just to say that all models are wrong. The very word model implies simplification and idealization. The idea that complex physical, biological or sociological systems can be exactly described by a few formulae is patently absurd. The construction of idealized representations that capture important stable aspects of such systems is, however, a vital part of general scientific analysis and statistical models, especially substantive ones, do not seem essentially different from other kinds of model." (Sir David Cox, 1995).   -->

<!-- ::: -->

