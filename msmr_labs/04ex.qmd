---
title: "Week 4 Exercises: Nested and Crossed"
params: 
    SHOW_SOLS: FALSE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
library(ggdist)
xaringanExtra::use_panelset()
qcounter <- function(){
  if(!exists("qcounter_i")){
    qcounter_i <<- 1
  }else{
    qcounter_i <<- qcounter_i + 1
  }
  qcounter_i
}
library(lme4)
```



# Psychoeducation Treatment Effects

```{r}
#| eval: false
#| echo: false
simm2<-function(seed=NULL,b0=0,b1=1,b2=1,z0=1,z1=1,e=1){
  if(!is.null(seed)){
    set.seed(seed)
  }
  n_groups = round(runif(1,1,15))*2
  npg = 5
  g = rep(1:n_groups, e = 5)      # the group identifier
  x = rep(0:4,n_groups)
  b = rep(0:1,e=n_groups/2)
  b = b[g]
  re0 = rnorm(n_groups, sd = z0)  # random intercepts
  re  = re0[g]
  rex = rnorm(n_groups, sd = z1)  # random effects
  re_x  = rex[g]
  lp = (b0 + re) + (b1 + re_x)*x + b2*x*b 
  y = rnorm(length(g), mean = lp, sd = e) # create a continuous target variable
  # y_bin = rbinom(N, size = 1, prob = plogis(lp)) # create a binary target variable
  data.frame(x, b=factor(b), g=factor(g), y)
}
eseed = round(runif(1,1e3,1e6))
set.seed(929918)
big = tibble(
    school = 1:30,
    int = rnorm(30,20,1),
    sl = rnorm(30,-.3,.5),
    intr = rnorm(30,-1,.5),
    z0 = runif(30,.5,1.5),
    z1 = runif(30,.5,1.5),
    e = runif(30,.5,1)
  )
  big = big |> mutate(
    data = pmap(list(int,sl,intr,z0,z1,e), ~simm2(b0=..1,b1=..2,b2=..3,z0=..4,z1=..5,e=..6))
  ) |> unnest(data)

  # m = lmer(round(y)~x*b+(1+x*b|school)+(1+x|school:g),big)
  # broom.mixed::augment(m) |>
  #   ggplot(aes(x=x,y=.fitted,col=factor(b)))+
  #   geom_point(aes(y=`round(y)`))+
  #   geom_line(aes(group=interaction(school,g)))

tnames = unique(replicate(100,paste0(sample(LETTERS,2),collapse="")))
  
big <- big |> transmute(
    therapist = tnames[school],
    group = ifelse(b==0,"Control","Treatment"),
    patient = pmap_chr(list(therapist,group,g),~paste(..1,..2,..3,sep="_")),
    visit = x,
    GAD = pmin(35,pmax(7,round(y)+5))
  ) 

big |> select(patient,visit,GAD) |>
  pivot_wider(names_from=visit,values_from=GAD, names_prefix="visit_") |>
  write_csv(file="../../data/lmm_gadeduc.csv")




```



:::frame
__Data: gadeduc.csv__

```{r}
#| include: false
geduc = read_csv("https://uoepsy.github.io/data/lmm_gadeduc.csv")
geduc1 = geduc |> 
  pivot_longer(2:last_col(), names_to="visit",values_to="GAD") |>
  mutate(
    visit = as.numeric(gsub("visit_","",visit))
  ) |>
  separate(patient, into=c("therapist","group","patient"), sep="_")
# m = lmer(GAD~visit*group+(1+visit*group|therapist)+(1+visit|therapist:patient),geduc1)
# summary(m)
tn = geduc1 |> group_by(therapist) |> summarise(np = n_distinct(patient))
```

This is synthetic data from a randomised controlled trial, in which `r nrow(tn)` therapists randomly assigned patients (each therapist saw between `r min(tn[,'np'])` and `r max(tn[,'np'])` patients) to a control or treatment group, and monitored their scores over time on a measure of generalised anxiety disorder (GAD7 - a 7 item questionnaire with 5 point likert scales).  

The control group of patients received standard sessions offered by the therapists. 
For the treatment group, 10 mins of each sessions was replaced with a specific psychoeducational component, and patients were given relevant tasks to complete between each session. All patients had monthly therapy sessions. Generalised Anxiety Disorder was assessed at baseline and then every visit over 4 months of sessions (5 assessments in total).  

The data are available at [https://uoepsy.github.io/data/lmm_gadeduc.csv](https://uoepsy.github.io/data/lmm_gadeduc.csv){target="_blank"}

You can find a data dictionary below:
```{r}
#| echo: false
#| label: tbl-lmm_gadeduc.csv
#| tbl-cap: "Data Dictionary: lmm_gadeduc.csv"
tibble(
    variable = names(geduc),
    description = c("A patient code in which the labels take the form <Therapist initials>_<group>_<patient number>.","Score on the GAD7 at baseline", 
                    "GAD7 at 1 month assessment",
                    "GAD7 at 2 month assessment",
                    "GAD7 at 3 month assessment",
                    "GAD7 at 4 month assessment"
                    )
)  |>
    kableExtra::kbl() |>
    kableExtra::kable_styling(full_width = FALSE)
```

:::


`r qbegin(qcounter())`
Uh-oh... these data aren't in the same shape as the other datasets we've been giving you..  

Can you get it into a format that is ready for modelling?  

::: {.callout-tip collapse="true"}
#### Hints

- It's wide, and we want it long.  
- Once it's long. "visit_0", "visit_1",.. needs to become the numbers 0, 1, ...
- One variable (`patient`) contains lots of information that we want to separate out. There's a handy function in the __tidyverse__ called `separate()`, check out the help docs!  

:::


`r qend()`
`r solbegin(label="1 - reshaping", slabel=F,show=T, toggle=params$TOGGLE)`
Here's the data. We have one row per patient, but we have multiple observations for each patient across the columns..  
```{r}
geduc = read_csv("https://uoepsy.github.io/data/lmm_gadeduc.csv")
head(geduc)
```

We can make it long by taking the all the columns from `visit_0` to `visit_4` and shoving their values into one variable, and keeping the name of the column they come from as another variable:  
```{r}
geduc |> 
  pivot_longer(2:last_col(), names_to="visit",values_to="GAD")
```


`r solend()`
`r solbegin(label="2 - time is numeric", slabel=F,show=T, toggle=params$TOGGLE)`
Now we know how to get our data long, we need to sort out our time variable (`visit`) and make it into numbers.  
We can replace all occurrences of the string `"visit_"` with nothingness `""`, and then convert them to numeric.  

```{r}
geduc |> 
  pivot_longer(2:last_col(), names_to="visit",values_to="GAD") |>
  mutate(
    visit = as.numeric(gsub("visit_","",visit))
  ) 
```


`r solend()`
`r solbegin(label="3 - splitting up the patient variable", slabel=F,show=T, toggle=params$TOGGLE)`
Finally, we need to sort out the `patient` variable. It contains 3 bits of information that we will want to have separated out. It has the therapist (their initials), then the group (treatment or control), and then the patient number. These are all separated by an underscore "_".  

The `separate()` function takes a column and separates it into several things (as many things as we give it), splitting them by some user defined separator such as an underscore:  
```{r}
geduc_long <- geduc |> 
  pivot_longer(2:last_col(), names_to="visit",values_to="GAD") |>
  mutate(
    visit = as.numeric(gsub("visit_","",visit))
  ) |>
  separate(patient, into=c("therapist","group","patient"), sep="_")
```

And we're ready to go!  
```{r}
geduc_long
```

`r solend()`


`r qbegin(qcounter())`
Visualise the data. Does it look like the treatment had an effect?  
Does it look like it worked for every therapist?  


::: {.callout-tip collapse="true"}
#### Hints

- remember, `stat_summary()` is very useful for aggregating data inside a plot.  

:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
Here's the overall picture. The average score on the GAD7 at each visit gets more and more different between the two groups. The treatment looks effective.. 
```{r}
ggplot(geduc_long, aes(x = visit, y = GAD, col = group)) +
  stat_summary(geom="pointrange")
```

Let's split this up by therapist, so we can see the averages across each therapist's set of patients.  
There's clear variability between therapists in how well the treatment worked. For instance, the therapists `EU` and `OD` don't seem to have much difference between their groups of patients.
```{r}
#| out-width: "100%"
ggplot(geduc_long, aes(x = visit, y = GAD, col = group)) +
  stat_summary(geom="pointrange") +
  facet_wrap(~therapist)
```

`r solend()`


`r qbegin(qcounter())`
Fit a model to test if the psychoeducational treatment is associated with greater improvement in anxiety over time.  
`r qend()`
`r solbegin(label="1 - fixed effects", slabel=F,params$SHOW_SOLS, toggle=params$TOGGLE)`

We want to know if how anxiety (`GAD`) changes over time (`visit`) is different between treatment and control (`group`).  

Hopefully this should hopefully come as no surprise^[if it does, head back to where we learned about interactions in the single level regressions `lm()`. It's just the same here.] - it's an interaction!  


```{r}
#| eval: false
lmer(GAD ~ visit * group + ...
       ...
     data = geduc_long)
```

`r solend()`
`r solbegin(label="2 - grouping structure", slabel=F,params$SHOW_SOLS, toggle=params$TOGGLE)`

We have multiple observations for each of the `r sum(tn$np)` patients, and those patients are nested within `r nrow(tn)` therapists.  

Note that in our data, the patient variable does not uniquely specify the individual patients. i.e. patient "1" from therapist "AO" is a different person from patient "1" from therapist "BJ". To correctly group the observations into different patients (and not 'patient numbers'), we need to have `therapist:patient`.  

So we capture therapist-level differences in `( ... | therapist)` and the patients-within-therapist-level differences in `( ... | therapist:patient)`:  

```{r}
#| eval: false
lmer(GAD ~ visit * group + ...
       ( ... | therapist) + 
       ( ... | therapist:patient),
     data = geduc_long)
```


`r solend()`
`r solbegin(label="3 - random effects", slabel=F,params$SHOW_SOLS, toggle=params$TOGGLE)`

Note that each patient can change differently in their anxiety levels over time - i.e. the slope of `visit` could vary by participant.  

Likewise, some therapists could have patients who change differently from patients from another therapist, so `visit|therapist` can be included.  

Each patient is in one of the two groups - they're _either_ treatment _or_ control. So we can't say that "differences in anxiety due to treatment varies between patients", because for any one patient the "difference in anxiety due to treatment" is not defined in our study design.  

However, therapists see multiple different patients, some of which are in the treatment group, and some of which are in the control group. So the treatment effect _could_ be different for different therapists!  

```{r}
mod1 <- lmer(GAD ~ visit*group + 
               (1+visit*group|therapist)+
               (1+visit|therapist:patient),
             geduc_long)
```

`r solend()`

`r qbegin(qcounter())`
For each of the models below, what is wrong with the random effect structure?  

```{r}
#| eval: false
modelA <- lmer(GAD ~ visit*group + 
               (1+visit*group|therapist)+
               (1+visit|patient),
             geduc_long)
```

```{r}
#| eval: false
modelB <- lmer(GAD ~ visit*group + 
               (1+visit*group|therapist/patient),
             geduc_long)
```


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
#| eval: false
modelA <- lmer(GAD ~ visit*group + 
               (1+visit*group|therapist)+
               (1+visit|patient),
             geduc_long)
```

The `patient` variable doesn't capture the different patients _within_ therapists, so this actually fits crossed random effects and treats all data where `patient==1` as from the same group (even if this includes several different patients' worth of data from different therapists!)

```{r}
#| eval: false
modelB <- lmer(GAD ~ visit*group + 
               (1+visit*group|therapist/patient),
             geduc_long)
```

Using the `/` here means we have the same random slopes fitted for therapists and for patients-within-therapists. but the effect of group can't vary by patient, so this doesn't work. hence why we need to split them up into `(...|therapist)+(...|therapist:patient)`.  

`r solend()`


`r qbegin(qcounter())`
Let's suppose that I don't want the psychoeducation treatment, I just want the standard therapy sessions that the 'Control' group received. Which therapist should I go to?  

::: {.callout-tip collapse="true"}
#### Hints

`dotplot.ranef.mer()` might help here!  
You can read about `ranef` in [Chapter 2 #making-model-predictions](https://uoepsy.github.io/lmm/02_lmm.html#making-model-predictions){target="_blank"}.  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
It would be best to go to one of the therapists `SZ`, `YS`, or `IT`...  

Why? These therapists all have the most negative slope of visit:  

```{r}
#| fig-height: 6
dotplot.ranef.mer(ranef(mod1))$therapist
```

`r solend()`


`r qbegin(qcounter())`
Recreate this plot.  

The faint lines represent the model estimated lines for each patient. The points and ranges represent our fixed effect estimates and their uncertainty.  

```{r} 
#| echo: false
effplot <- effects::effect("visit*group",mod1) |>
  as.data.frame()

broom.mixed::augment(mod1) |> 
  mutate(
    upatient = paste0(therapist,patient)
  ) |>
  ggplot(aes(x=visit,y=.fitted,col=group))+
  stat_summary(geom="line", aes(group=upatient,col=group), alpha=.1)+
  geom_pointrange(data=effplot, aes(y=fit,ymin=lower,ymax=upper,col=group))+
  labs(x="- Month -",y="GAD7")

```


::: {.callout-tip collapse="true"}
#### Hints

- you can get the patient-specific lines using `augment()` from the __broom.mixed__ package, and the fixed effects estimates using the __effects__ package. 
- remember that the "patient" column doesn't group observations into unique patients. 
- remember you can pull multiple datasets into ggplot:  
```{r}
#| eval: false
ggplot(data = dataset1, aes(x=x,y=y)) + 
  geom_point() + # points from dataset1
  geom_line(data = dataset2) # lines from dataset2
```
- see more in [Chapter 2 #visualising-models](https://uoepsy.github.io/lmm/02_lmm.html#visualising-models){target="_blank"}


:::


`r qend()`
`r solbegin(label="1 - the relevant parts", slabel=F,show=T, toggle=params$TOGGLE)`

The __effects__ package will give us the fixed effect estimates: 
```{r}
library(effects)
library(broom.mixed)
effplot <- effect("visit*group",mod1) |>
  as.data.frame()
```

We want to get the fitted values for each patient. We can get fitted values using `augment()`. But the `patient` variable doesn't capture the _unique_ patients, it just captures their numbers (which aren't unique to each therapist).  
So we can create a new column called `upatient` which pastes together the therapists initials and the patient numbers

```{r}
augment(mod1) |> 
  mutate(
    upatient = paste0(therapist,patient),
    .after = patient # place the column next to the patient col
  )
```
`r solend()`
`r solbegin(label="2 - constructing the plot", slabel=F,show=T, toggle=params$TOGGLE)`

```{r}
library(effects)
library(broom.mixed)
effplot <- effect("visit*group",mod1) |>
  as.data.frame()

augment(mod1) |> 
  mutate(
    upatient = paste0(therapist,patient),
    .after = patient # place the column next to the patient col
  ) |>
  ggplot(aes(x=visit,y=.fitted,col=group))+
  stat_summary(geom="line", aes(group=upatient,col=group), alpha=.1)+
  geom_pointrange(data=effplot, aes(y=fit,ymin=lower,ymax=upper,col=group))+
  labs(x="- Month -",y="GAD7")
```


`r solend()`

<br>
<div class="divider div-transparent div-dot"></div>

# Jokes

```{r}
#| eval: false
#| echo: false
#set.seed()
jokeid = read_csv("data/laughlab_jokes.csv")

set.seed(123)
n_groups = 90
N = n_groups * nrow(jokeid)
g = rep(1:n_groups, e = nrow(jokeid))
b = rbinom(n_groups,1,.5)[g]
b = unlist(lapply(1:n_groups, \(x) sample(rep(0:1,e=15))))
j = rep(1:nrow(jokeid), n_groups)

g.re0 = rnorm(n_groups,0,8)[g]
g.re = MASS::mvrnorm(n_groups, mu = c(0,0), Sigma = matrix(c(8,1,1,3),nrow=2))
g.re0 = g.re[,1][g]
g.reb = g.re[,2][g]

j.re = MASS::mvrnorm(nrow(jokeid), mu = c(0,0), Sigma = matrix(c(5,2,2,5),nrow=2))
j.re0 = j.re[,1][j]
j.reb = j.re[,2][j]
b0 = runif(1,30,55)
b1 = runif(1,1,3)
lp = b0 + g.re0 + j.re0 +
  (b1 + j.reb + g.reb)*b
y = rnorm(N, mean = lp, sd = 6)
#y_bin = rbinom(N, size = 1, prob = plogis(lp))
df=data.frame(g = factor(g),j = factor(j),b,y)

df = left_join(df,
          left_join(jokeid, 
                    tibble(
                      rank = order(j.re[,1],decreasing = TRUE),
                      j = factor(1:30)
                      )
          ) |> dplyr::select(joke, j)
)

ggplot(df,aes(x=b,y=y,group=g))+
  geom_point(alpha=.1,size=.5)+
  stat_summary(geom="pointrange",position=position_dodge(width=.2))
  

lm(y~b,df)
m = lmer(y~1+b+(1|g)+(1+b|j),df)
summary(m)


names(df)

laughs <- df |> transmute(
  ppt = paste0("PPTID",g),
  joke_label = joke,
  joke_id = j,
  delivery = case_when(
    b == 0 ~ "audio",
    b == 1 ~ "video"
  ),
  rating = round(y)
)

write_csv(laughs, "../../data/lmm_laughs.csv")
```

:::frame
__Data: lmm_laughs.csv__  

```{r}
#| include: false
laughs <- read_csv("https://uoepsy.github.io/data/lmm_laughs.csv")
```

These data are simulated to imitate an experiment that investigates the effect of visual non-verbal communication (i.e. gestures, facial expressions) on joke appreciation. 
`r n_distinct(laughs$ppt)` Participants took part in the experiment, in which they each rated how funny they found a set of `r n_distinct(laughs$joke_id)` jokes. For each participant, the order of these `r n_distinct(laughs$joke_id)` jokes was randomly set for each run of the experiment. For each participant, the set of jokes was randomly split into two halves, with the first half being presented in audio-only, and the second half being presented in audio and video. This meant that each participant saw `r n_distinct(laughs$joke_id)/2` jokes with video and `r n_distinct(laughs$joke_id)/2` without, and each joke would be presented in with video roughly half of the times it was seen.  

The researchers want to investigate whether the delivery (audio/audiovideo) of jokes is associated with differences in humour-ratings.  

Data are available at [https://uoepsy.github.io/data/lmm_laughs.csv](https://uoepsy.github.io/data/lmm_laughs.csv){target="_blank"}

```{r}
#| echo: false
#| label: tbl-laughdict
#| tbl-cap: "Data Dictionary: lmm_laughs.csv"
tibble(
  variable = names(laughs),
  description = c("Participant Identification Number",
                  "Joke presented",
                  "Joke Identification Number",
                  "Experimental manipulation: whether joke was presented in audio-only ('audio') or in audiovideo ('video')",
                  "Humour rating chosen on a slider from 0 to 100")
) |> gt::gt()
```



:::



`r qbegin(qcounter())`
Prior to getting hold of any data, we should be able to write out the structure of our ideal "maximal" model given that we have a description of the design of the study.  

Can you do so?  


::: {.callout-tip collapse="true"}
#### Hints

Don't know where to start? Try following the steps in [Chapter 8 #maximal-model](https://uoepsy.github.io/lmm/08_modelbuilding.html#maximal-model){target="_blank"}.  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

We want to estimate the effect of delivery on humour rating of jokes:  
`rating ~ delivery`  

We have 30 observations for each participant. Participants are just another sampling unit here.  
`rating ~ delivery + (1 | ppt)`  

We have 90 observations for each joke. We're not interested in specific jokes here, so we can think of these as a random set of experimental items that we might choose differently next time we conduct an experiment to assess delivery~rating:
`rating ~ delivery + (1 | ppt) + (1 | joke_id)`  

Participants each see 15 jokes without video, and 15 with. The `delivery` variable is *"within"* participant. Some participants might respond differently when there is video (vs without) whereas some might not rate jokes any differently. The effect of delivery on rating might be *vary by participant*:  
`rating ~ delivery + (1 + delivery | ppt) + (1 | joke_id)`  

Each joke is presented both with and without the video. Some jokes might really benefit from gestures and facial expressions, whereas some might not. The effect of delivery on rating might be *vary by joke*:  
`rating ~ delivery + (1 + delivery | ppt) + (1 + delivery | joke_id)`  

`r solend()`

`r qbegin(qcounter())`
Read in and clean the data (if necessary).  

Create some plots showing: 

1. the average rating for audio vs audio+video for each joke
2. the average rating for audio vs audio+video for each participant


::: {.callout-tip collapse="true"}
#### Hints

- you could use `facet_wrap`, or even `stat_summary`!  
- you might want to use `joke_id`, rather than `joke_label` (the labels are very long!)

:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`
Here is one using `facet_wrap`:
```{r}
ggplot(laughs, aes(x = delivery, y = rating)) +
  geom_boxplot()+
  facet_wrap(~joke_id)
```

And one using `stat_summary()` for participants: 
```{r}
ggplot(laughs, aes(x = delivery, y = rating)) +
  stat_summary(geom="pointrange", aes(group = ppt),
               position = position_dodge(width=.2))+
  stat_summary(geom="line", aes(group = ppt),
               position = position_dodge(width=.2))

```

`r solend()`


`r qbegin(qcounter())`
Fit an appropriate model to address the research aims of the study. 


::: {.callout-tip collapse="true"}
#### Hints

This should be the one you came up with a couple of questions ago!
:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
mod <- lmer(rating ~ delivery + 
              (1 + delivery | joke_id) +
              (1 + delivery| ppt), data = laughs)
```

`r solend()`

`r qbegin(qcounter())`
Which joke is funniest when presented just in audio? For which joke does the video make the most difference to ratings?  


::: {.callout-tip collapse="true"}
#### Hints

These can all be answered by examining the random effects with `ranef()`.  
See [Chapter 2 #making-model-predictions](https://uoepsy.github.io/lmm/02_lmm.html#making-model-predictions){target="_blank"}.  

If you're using `joke_id`, can you find out the actual joke that these correspond to?
:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
dotplot.ranef.mer(ranef(mod))$joke_id
```

Joke 19 is the funniest apparently! (not sure I agree)

Lots of ways to find what the joke actually is. Here is one way:
```{r}
laughs |> count(joke_id, joke_label) |>
  filter(joke_id==19) |>
  pull(joke_label)
```


And from the plot above, Joke 28 has the most benefit of video. 
We can quickly check this with something like:  
```{r}
ranef(mod)$joke_id |>
  filter(deliveryvideo == max(deliveryvideo))
```

The joke itself is a bit weird.. maybe the video really helped!  

```{r}
laughs |> count(joke_id, joke_label) |>
  filter(joke_id==28) |>
  pull(joke_label)
```

`r solend()`

`r qbegin(qcounter())`
Do jokes that are rated funnier when presented in audio-only tend to also benefit more from the addition of video?  


::: {.callout-tip collapse="true"}
#### Hints

Think careful about this question. The random effects show us that jokes vary in their intercepts (ratings in audio-only) and in their effects of delivery (the random slopes). We want to know if these are related..  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
VarCorr(mod)
```
It's the correlation here that tell us - jokes rated higher in the audio-only tend to have a bigger effect of the video. 

We can see this in a plot if we like. Here every dot is a joke, and the x-axis shows whether it is above or below the average rating for audio-only (the intercept). The y-axis shows whether it is above or below the average effect of video. 
```{r}
plot(ranef(mod)$joke)
```

`r solend()`

`r qbegin(qcounter())`
Create a plot of the estimated effect of video on humour-ratings. Try to plot not only the fixed effects, but the raw data too.  


::: {.callout-tip collapse="true"}
#### Hints

See e.g. [Chapter 2 #visualising-models](https://uoepsy.github.io/lmm/02_lmm.html#visualising-models){target="_blank"}

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
library(effects)

plotdatf <- effect("delivery",mod) |>
  as.data.frame()

ggplot(data = laughs, aes(x = delivery)) +
  geom_jitter(aes(y = rating), width = .1, height = 0, alpha = .1) +
  geom_pointrange(data = plotdatf,
                  aes(y = fit, ymin = lower, ymax = upper),
                  position=position_nudge(x=.2))
```

`r solend()`


<br>
<div class="divider div-transparent div-dot"></div>

# Optional Extra: Vocab Development

:::frame
__Data: pvt_bilingual.csv__ 

```{r}
#| echo: false
pvt <- read_csv("https://uoepsy.github.io/data/pvt_bilingual.csv")
pvtsc = pvt |>
  group_by(school, child) |>
  mutate(n_obs = 1:n()) |>
  ungroup() |>
  mutate(child = ifelse(n_obs>7, paste0(child," 2"), child)) |> count(school,child,isBilingual)
```

`r nrow(pvtsc)` children from `r length(unique(pvt$school))` schools were included in the study. Children were assessed on a yearly basis for 7 years throughout primary school on a measure of vocabulary administered in English, the Picture Vocab Test (PVT). `r sum(pvtsc$isBilingual==0)` were monolingual English speakers, and `r sum(pvtsc$isBilingual==1)` were bilingual (english + another language). 

Previous research conducted on monolingual children has suggested that that scores on the PVT increase steadily up until the age of approximately 7 or 8 at which point they begin to plateau. The aim of the present study is to investigate differences in the development of vocabulary between monolingual and bilingual children.  

The data are available at [https://uoepsy.github.io/data/pvt_bilingual.csv](https://uoepsy.github.io/data/pvt_bilingual.csv).  

```{r}
#| echo: false
#| label: tbl-pvtdict
#| tbl-cap: "Data Dictionary: pvt_bilingual.csv"
tibble(variable = names(pvt),
       description = c(
         "Child's name",
         "School Identifier",
         "Binary variable indicating whether the child is monolingual (0) or bilingual (1)",
         "Age (years)",
         "Score on the Picture Vocab Test (PVT). Scores range 0 to 60")
) |>
    kableExtra::kbl() |>
    kableExtra::kable_styling(full_width = FALSE)
```

:::

`r qbegin(paste0(qcounter(), " - Less Guided"))`
Conduct an analysis to estimate the differences in trajectories of vocabulary development between children attending bilingual schools vs those attending monolingual schools.  

Write up your results.  


::: {.callout-tip collapse="true"}
#### Hints

1. always plot your data!
2. read the study background: "increase steadily ... before beginning to plateau" describes a _curve_!  
3. plotting the data can give an initial sense of the possible need for higher order polynomials.  
4. multiple observations for each child. multiple children in each school.. 

:::


`r qend()`

`r solbegin(label="1 - initial data checks", slabel=F,show=TRUE, toggle=params$TOGGLE)`

Let's read in the data:  
```{r}
pvt <- read_csv("https://uoepsy.github.io/data/pvt_bilingual.csv")
head(pvt)
```
First, we're going to want `isBilingual` to be a factor, because the 1s and 0s are categories, not numbers. 
```{r}
pvt <- pvt |> mutate(isBilingual = factor(isBilingual))
```


We have 30 distinct schools:
```{r}
n_distinct(pvt$school)
```

And 418 distinct children. Is that right?  
```{r}
n_distinct(pvt$child)
```

Given that the `pvt$child` variable is just the first name of the child, it's entirely likely that there will be, for instance more than one "Martin".  

This says that there are 487!  
```{r}
pvt |> count(school, child) |> nrow()
```

But wait... we could _still_ have issues. What if there were 2 "Martin"s at the same school??
```{r}
pvt |> 
  # count the school-children groups
  count(school, child) |> 
  # arrange the output so that the highest 
  # values of the 'n' column are at the top
  arrange(desc(n))
```

Aha! There are 7 cases where schools have two children of the same name. Remember that each child was measured at 7 timepoints. We shouldn't have people with 14!  

If we actually _look_ at the data, we'll see that it is very neatly organised, with each child's data together. This means that we could feasibly make an educated guess that, e.g., the "Jackson" from "School 3" in rows 155-161 is different from the "Jackson" from "School 3" at rows 190-196. 

Because of the ordering of our data, we can do something like this:  
```{r}
pvt <- 
  pvt |>
  # group by the school and child
  group_by(school, child) |>
  mutate(
    # make a new variable which counts from 1 to 
    # the number of rows for each school-child
    n_obs = 1:n()
  ) |>
  # ungroup the data
  ungroup() |>
  mutate(
    # change it so that if the n_obs is >7, the 
    # child becomes "[name] 2", to indicate they're the second
    # child with that name
    child = ifelse(n_obs>7, paste0(child," 2"), child)
  )
```

Now we have 494!  
```{r}
pvt |> count(school, child) |> nrow()
```

And nobody has anything other than 7 observations!
```{r}
pvt |> count(school, child) |>
  filter(n != 7)
```

Phew!  
`r solend()`
`r solbegin(label="2 - exploratory plots and descriptives", slabel=F,show=TRUE, toggle=params$TOGGLE)`

How many bilingual children?  
```{r}
pvt |> group_by(isBilingual) |>
  summarise(nchild = n_distinct(child))
```

How many children (mono/bilingual) in each school? 
```{r}
pvt |> group_by(school, isBilingual) |>
  summarise(nchild = n_distinct(child)) |>
  ggplot(aes(y=school,x=nchild,fill=isBilingual))+
  geom_col()
```



Okay, let's just fit an intercept-only model:  
```{r}
pvt_null <- lmer(PVT ~ 1 + 
                   (1 | school) +
                   (1 | school:child), data = pvt)
summary(pvt_null)
```

```{r}
#| echo: false
vcres = VarCorr(pvt_null) |> as.data.frame()
vcres = round(vcres$vcov,2)
```


As we can see from `summary(pvt_null)`, the random intercept variances are `r vcres[1]` for child-level, `r vcres[2]` for school-level, and the residual variance is `r vcres[3]`.

So child level differences account for $\frac{`r vcres[1]`}{`r paste0(vcres,collapse=" + ")`} = `r round(vcres[1]/sum(vcres),2)`$ of the variance in PVT scores, and child & school differences together account for $\frac{`r paste0(vcres[1:2],collapse=" + ")`}{`r paste0(vcres,collapse=" + ")`} = `r round(sum(vcres[1:2])/sum(vcres),2)`$ of the variance.

Here's an initial plot too:

```{r}
ggplot(pvt, aes(x=age,y=PVT,col=factor(isBilingual)))+
  stat_summary(geom="pointrange")+
  stat_summary(geom="line")
```

`r solend()`
`r solbegin(label="3 - modelling", slabel=F,show=TRUE, toggle=params$TOGGLE)`

I feel like either raw or orthogonal polynomials would be fine here - there's nothing explicit from the study background about stuff "at baseline". There's the stuff about the plateau at 7 or 8, but we can get that from the model plots. Orthogonal will allow us to compare the trajectories overall (their linear trend, the 'curviness' and 'wiggliness').  

An additional benefit of orthogonal polynomials is that we are less likely to get singular fits when we include polynomial terms in our random effects. Remember, raw polynomials are correlated, so often the by-participant variances in raw poly terms are highly correlated. 

I've gone for 3 degrees of polynomials here because the plot above shows a bit of an S-shape for the bilinguals. 

```{r}
pvt <- pvt |> mutate(
  poly1 = poly(age, 3)[,1],
  poly2 = poly(age, 3)[,2],
  poly3 = poly(age, 3)[,3],
)
```

These models do not converge.  
I've tried to preserve the by-child random effects of time, because while I think Schools probably _do_ vary, all the schools teach the same curriculum, whereas there's _a lot_ of varied things that can influence a child's vocabulary, both in and out of school.    
```{r}
#| eval: false
mod1 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + (poly1 + poly2 + poly3)*isBilingual | school) + 
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)

mod2 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + isBilingual * (poly1 + poly2) + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)

mod3 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + isBilingual * poly1 + poly2 + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)

mod4 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + isBilingual + poly1 + poly2 + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)

mod5 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + isBilingual + poly1 + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)
# relative to the variance in time slopes, there's v little by-school variance in bilingual differences in vocab

mod6 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + poly1 + poly2 +  poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)
# looks like curvature doesn't vary between schools much as linear and wiggliness 
```

this one converges! 
```{r}
mod7 <- lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + poly1 + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)
```


`r solend()`
`r solbegin(label="4 - model plots", slabel=F,show=TRUE, toggle=params$TOGGLE)`

Let's plot the predictions: 
```{r}
library(broom.mixed)
augment(mod7) |> 
  mutate(
    poly1 = round(poly1, 3) # because of rounding errors that make plot weird
  ) |>
  ggplot(aes(x=poly1,col=isBilingual))+
  stat_summary(geom="pointrange",aes(y=PVT))+
  stat_summary(geom="line", aes(y=.fitted))
```

Remember that these are just the average of all model fitted values. Because everyone has complete data here, we can use these to visualise our model estimates without worrying about them being distorted by missing data. Just like the fixed effects themselves though, all this is focussed on "the average child from the average school". The plot hides a lot of the *variability* that we have actually modelled. 
For instance, consider how our view changes when we add in the individual lines for each child (below). The lines for the average child are just the same as above, but we can now see just how much children vary. 

```{r}
#| code-fold: true
augment(mod7) |> 
  mutate(
    poly1 = round(poly1, 3) 
  ) |>
  ggplot(aes(x=poly1,col=isBilingual))+
  # make a line for each "school-child" group: 
  geom_line(aes(group=interaction(school,child),
                y=.fitted),alpha=.1)+
  stat_summary(geom="pointrange",aes(y=PVT))+
  stat_summary(geom="line", aes(y=.fitted))
```
  
Let's refit our model with lmerTest:  
```{r}
mod7 <- lmerTest::lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + poly1 + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)

summary(mod7)
```

`r solend()`
`r solbegin(label="5 - model interpretation", slabel=F,show=TRUE, toggle=params$TOGGLE)`

The exact value of the coefficients here don't really give us anything meaningful. Note that in our plots above, the x-axis is "poly1", which is some weirdly re-scaled version of "age", so these coefficients represent things like the estimated change in PVT when "moving up 1 in poly1". But these units are not remotely useful to us. Even if we wanted to try and scale back to get out something we could interpret in terms of years of age, the whole point of non-linear change is that we can't just say "PVT increases by $b$ with every extra year of age", because we need to consider the higher order polynomial terms.  

The long and the short of it is that while the numbers don't really matter here, the sign (+ or -) and the significance _does_ tell us stuff:  

```{r}
#| echo: false
mm <- lmerTest::lmer(PVT ~ 1 + (poly1 + poly2 + poly3) * isBilingual + 
       (1 + poly1 + poly3 | school) +
       (1 + (poly1 + poly2 + poly3) | school:child),
     data = pvt)

tidy(mm) |> filter(effect=="fixed") |> transmute(
  term,
  est = round(estimate,2),
  p = ifelse(p.value<.05,"*",""),
  interpretation = c(
    "average vocab score at the mean age (for monolingual)",
    "vocab increases over time (for monolingual children)",
    "the increase in vocab becomes more gradual (for monolingual children)",
    "no significant wiggliness to vocab trajectory of the average monolingual child",
    "average vocab score at mean age is lower for bilingual vs monolingual children",
    "no significant difference in linear trend of vocab for bilingual vs monolingual",
    "curvature for vocab trajectory of bilingual children significantly differs from that of monolinguals",
    "wiggliness for vocab trajectory of bilingual children significantly differs from that of monolinguals"
  )
) |> gt::gt()
```

From the random effects, we get even more information! All this stuff is kind of "added context" for the conclusions (which will come from our fixed effects).  
```{r}
VarCorr(mod7)
```
School's vary in the average child vocab score at mean age with an SD of 4.5. Schools with higher vocab scores at the mean age tend to have lower linear increase. Within schools, children vary in the vocab scores at mean age with an SD of 5.9. Children with steeper linear increase in vocab tend to have less curvature. 




<!-- ::: {.callout-caution collapse="true"} -->
<!-- #### optional extra: plotting uncertainty of fixed effects -->

<!-- We've seen a few times that taking all the fitted values and averaging can give us the trajectories. But we've also seen that this can cause issues if we have missing data, or unbalanced designs. We have also had to use things like the __effects__ package to show uncertainty in the fixed effects estimates, because this is not the same as the standard errors around the average fitted values.   -->

<!-- Another option instead of the __effects__ package (harder to make work with polynomials), is to use lots and lots of predictions from the model.   -->

<!-- In USMR, we often visualised our model in a 3 step process: -->

<!-- 1. make a little dataframe across the values that we want to plot -->
<!-- 2. use `broom::augment(model, newdata = plotdata, interval = "confidence")` to add some predictions and confidence intervals.   -->
<!-- 3. plot!   -->

<!-- We can use this same logic in multilevel models, but step 2 is a little different.   -->


<!-- First we make a little dataframe.   -->
<!-- Because the actual estimation of orthogonal polynomials can depend on the number of values we're putting in (`poly(4:10, 2)` does not give the same scaling as `poly(c(4:10,4:10),2)`), it's best to just capture the polynomials that we actually fitted our model to.   -->
<!-- So here we get the first 7 rows of each poly1, because those correspond to our polynomials that we fitted the model to.   -->
<!-- ```{r} -->
<!-- plotdat <- -->
<!--   tibble( -->
<!--     age = 4:10, -->
<!--     poly1 = pvt$poly1[1:7], -->
<!--     poly2 = pvt$poly2[1:7], -->
<!--     poly3 = pvt$poly3[1:7], -->
<!--     isBilingual = "0", -->
<!--     school = ".", -->
<!--     child = "." -->
<!--   ) -->
<!-- ``` -->

<!-- We're going to have to give it _some_ values for `school` and for `child`, but we don't want to predict for any specific school or child that is in our dataset.  -->
<!-- By setting these to something like ".", that doesn't occur in our data, we can estimate based on the fixed coefficients only.   -->

<!-- Note that currently `isBilingual` is set to 0, but we want to plot for the bilinguals too, so we'll need to duplicate our `plotdat` object:    -->
<!-- ```{r} -->
<!-- plotdat <- -->
<!--   bind_rows( -->
<!--     plotdat, -->
<!--     plotdat |> mutate(isBilingual=1) -->
<!--   ) -->
<!-- ``` -->

<!-- Finally, the __merTools__ package has the `predictInterval` function that can get us some intervals   -->
<!-- ```{r} -->
<!-- library(merTools) -->

<!-- bind_cols( -->
<!--   plotdat,  -->
<!--   predictInterval(merMod = mod7, newdata = plotdat, -->
<!--                   level = 0.95, n.sims = 2000, -->
<!--                   include.resid.var = FALSE) -->
<!--           ) |> -->
<!--   ggplot(aes(x=poly1,y=fit,ymin=lwr,ymax=upr, -->
<!--              col=isBilingual,fill=isBilingual))+ -->
<!--   geom_line()+ -->
<!--   geom_ribbon(alpha=.2) -->
<!-- ``` -->

<!-- ::: -->




`r solend()`


<br>
<div class="divider div-transparent div-dot"></div>


# Optional Extra: Test Enhanced Learning

:::frame
__Data: Test-enhanced learning__  

An experiment was run to conceptually replicate "test-enhanced learning" (Roediger & Karpicke, 2006): two groups of 25 participants were presented with material to learn. One group studied the material twice (`StudyStudy`), the other group studied the material once then did a test (`StudyTest`). Recall was tested immediately (one minute) after the learning session and one week later. The recall tests were composed of 175 items identified by a keyword (`Test_word`). 

The critical (replication) prediction is that the `StudyStudy` group recall more items on the immediate test, but the `StudyTest` group will retain the material better and thus perform better on the 1-week follow-up test.  

The following code loads the data into your R environment by creating a variable called `tel`:

```{r}
#| eval: false
load(url("https://uoepsy.github.io/data/testenhancedlearning.RData"))
```

```{r} 
#| echo: false
#| label: tbl-teldict
#| tbl-cap: "Data Dictionary: testenhancedlearning.Rdata"
load(url("https://uoepsy.github.io/data/testenhancedlearning.RData"))
tibble(
  variable=names(tel),
  description=c("Unique Participant Identifier", "Group denoting whether the participant studied the material twice (StudyStudy), or studied it once then did a test (StudyTest)","Time of recall test ('min' = Immediate, 'week' = One week later)","Word being recalled (175 different test words)","Whether or not the word was correctly recalled","Time to recall word (milliseconds)")
) |>
    kableExtra::kbl() |>
    kableExtra::kable_styling(full_width = FALSE)
```

:::


`r qbegin(qcounter())`
Load and plot the data. Does it look like the effect was replicated?  

> The critical (replication) prediction is that the `StudyStudy` group recall more items on the immediate test, but the `StudyTest` group will retain the material better and thus perform better on the 1-week follow-up test.  


::: {.callout-tip collapse="true"}
#### Hints

We can actually look at this from a couple of different angles. The most obvious option is to take successful learning as "correctly recalling" an item. This means we take the `Correct` variable as our outcome.  

Note we also have `Rtime` - the "time-to-recall" of an item. This could also work as an outcome, but note that it also includes the time it took participants to provide an incorrect response too. If this was your own project, you may well want to provide analyses of `Correct`, and then also of the time-taken, but on the subset of correctly recalled items.  

:::


`r qend()`
`r solbegin(show=TRUE, toggle=params$TOGGLE)`

```{r}
load(url("https://uoepsy.github.io/data/testenhancedlearning.RData"))

ggplot(tel, aes(Delay, Correct, col=Group)) + 
  stat_summary(fun.data=mean_se, geom="pointrange")+
  theme_light()
```

That looks like test-enhanced learning to me!  


`r solend()`

`r qbegin(qcounter())`

Test the critical hypothesis using a mixed-effects model.  

Fit the maximal random effect structure supported by the experimental design. Simplify the random effect structure until you reach a model that converges.  

__Note:__ Some of the models you attempt here might take time to fit. This is normal, and you can cancel the estimation at any time by pressing the escape key.  
I suggest that you write your initial model, set it running, and then look at the first solution to see if it converged for me. You can assume that if it didn't work for me, it also won't work for you. I've shown the random effects for each model, in case it helps in deciding your next step.  

::: {.callout-tip collapse="true"}
#### Hints

What we're aiming to do here is to follow [Barr et al.'s](https://doi.org/10.1016/j.jml.2012.11.001) advice of defining our maximal model and then removing only the terms to allow a non-singular fit.  

+ What kind of model will you use? What is our outcome? is it binary, or continuous? 
+ We can expect variability across subjects (some people are better at learning than others) and across items (some of the recall items are harder than others). How should this be represented in the random effects?

:::

`r qend()` 
`r solbegin(label="1 - maximal model", slabel=F,show=TRUE, toggle=params$TOGGLE)`

```{r}
#| echo: false
# save(mod1,mod2,mod3,mod4,file="data/telmodels.Rdata")
load("data/telmodels.Rdata")
```

We have a __crossed__ random effect structure here. Each participant was tested on every word, and each word was seen by every participant.  

Subjects were tested at both the `min` and `week`, so `Delay|Subject_ID` can be included (some people might retain the items better than others).  
Likewise the words were seen at both `min` and `week`, and some words might be more easy to retain than others (`Delay|Test_word`).  

The participants are in either one group or another, so we can't have `Group|Subject_ID`. However, the words were seen by people in both groups, so we _can_ have `Group|Test_word`.  

This one took my computer about 6 minutes.  
```{r}
#| eval: false
mod1 <- glmer(Correct ~ Delay*Group +
             (1 + Delay | Subject_ID) +
             (1 + Delay * Group | Test_word),
             family=binomial, data=tel)
```
<p style="color:red;font-size:.8em">
Warning message:<br>
In checkConv(attr(opt, "derivs"), opt\$par, ctrl = control\$checkConv,  :<br>
  Model failed to converge with max|grad| = 0.0184773 (tol = 0.002, component 1)
</p>

```{r}
VarCorr(mod1)
```

`r solend()`
`r solbegin(label="2 - Removing Delay*Group|Test_word", slabel=F,show=TRUE, toggle=params$TOGGLE)`

Lets remove the interaction in the by-word random effects.  
This one took about 5 minutes...
```{r}
#| eval: false
mod2 <- glmer(Correct ~ Delay*Group +
             (1 + Delay | Subject_ID) +
             (1 + Delay + Group | Test_word),
             family=binomial, data=tel)
```
<p style="color:red;font-size:.8em">
Warning message:<br>
In checkConv(attr(opt, "derivs"), opt\$par, ctrl = control\$checkConv,  :<br>
  Model failed to converge with max|grad| = 0.00887744 (tol = 0.002, component 1)
</p>

```{r}
VarCorr(mod2)
```

`r solend()`
`r solbegin(label="3 - Removing Group|Test_word", slabel=F,show=TRUE, toggle=params$TOGGLE)`

We still have a singular fit here. Thinking about the study, if we are going to remove __one__ of the by-testword random effects (`Delay` or `Group`), which one do we consider to be more theoretically justified? Is the effect of Delay likely to vary by test-words? More so than the effect of group is likely to vary by test-words?  
Quite possibly - it's reasonable to think that some words will be more easily retained over a week than others, but I can't come up with a reason to think why `StudyTest` vs `StudyStudy` would have a different effect for some words than others.  

Let's remove the by-testword random effect of group. 
```{r}
#| eval: false
mod3 <- glmer(Correct ~ Delay*Group +
             (1 + Delay | Subject_ID) +
             (1 + Delay | Test_word),
             family=binomial, data=tel)
```

This one converges! But we still have a correlation of -1.  
Why did we not get a warning message?  
```{r}
VarCorr(mod3)
```

The `isSingular()` function allows us to check for when a model is close to singularity (i.e. on the boundary of the feasible parameter space):  
```{r}
isSingular(mod3)
```

This suggests that we're fine! However, note that this function has a tolerance, which is by default set to 1e-4, or 0.0001. Change this to 1e-3, and it indicates a problem.  
```{r}
isSingular(mod3, tol=1e-3)
```

So we're kind of in a grey area that suggests we are close to overfitting here, so it might be worth continuing to simplify.  


`r solend()`
`r solbegin(label="4 - Removing Delay|Test_word", slabel=F,show=TRUE, toggle=params$TOGGLE)`

```{r}
#| eval: false
mod4 <- glmer(Correct ~ Delay*Group +
             (1 + Delay | Subject_ID) +
             (1 | Test_word),
             family=binomial, data=tel)
```
Even when we raise the tolerance here, we're still fine:  
```{r}
isSingular(mod4, tol=1e-3)
```
And here's our random effects: 
```{r}
VarCorr(mod4)
```

`r solend()`
`r solbegin(label="5 - Comparisons", slabel=F,show=TRUE, toggle=params$TOGGLE)`

In the process of getting to our final model, we've just fitted quite a few models that didn't converge. We definitely don't want to do anything with these models (i.e. we shouldn't report them or use them in model comparisons etc).  

However, it can sometimes be useful to just check how estimates of fixed effects and their standard errors differ across these models. More often than not, this simply provides us with reassurance that the removal of random effects hasn't actually had too much of an impact on anything we're going to conduct inferences on.  

For instance, in all these models, the fixed effects estimates are all pretty similar, suggesting that they've all found similar estimates of these parameters which have been largely invariant to our refinement of the random effects.  

```{r}
#| echo: false
bind_rows(
 broom.mixed::tidy(mod1) |> filter(effect=="fixed") |> mutate(mod="mod1"), 
 broom.mixed::tidy(mod2) |> filter(effect=="fixed") |> mutate(mod="mod2"), 
 broom.mixed::tidy(mod3) |> filter(effect=="fixed") |> mutate(mod="mod3"), 
 broom.mixed::tidy(mod4) |> filter(effect=="fixed") |> mutate(mod="mod4")
) |> transmute(mod,term,
               estimate = paste0(round(estimate,3), " (",round(std.error,3),")")) |>
  pivot_wider(values_from=estimate,names_from=mod) |> gt::gt()
```

`r solend()` 



`r qbegin(qcounter())`
Create a plot of the predicted probabilities and uncertainty for each of the `Delay * Group` combinations.  
`r qend()`
`r solbegin(show=TRUE, toggle=params$TOGGLE)`

```{r}
library(effects)
effplot <- effect("Delay:Group", mod4) |>
  as.data.frame()

ggplot(effplot, aes(Delay, fit, color=Group)) + 
  geom_pointrange(aes(ymax=upper, ymin=lower), 
                  position=position_dodge(width = 0.2))+
  theme_classic() # just for a change :)
```

`r solend()`


`r qbegin(qcounter())`

Here are odds ratios for our model:  
```{r}
#| code-fold: true
# cbind combines columns
cbind(
  # the odds ratios:
  OR = exp(fixef(mod4)), 
  # the CIs:
  exp(confint(mod4, method="Wald", parm="beta_"))
)
```

What should we do with this information? How should we apply test-enhanced learning to learning R and statistics?  
`r qend()` 
`r solbegin(show=TRUE, toggle=params$TOGGLE)`
We'll get the benefits of test-enhanced learning if we try these exercises before looking at any of the solutions that are visible! If we don't test ourselves, we're more likely to forget it in the long run.  
`r solend()` 
