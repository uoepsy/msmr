---
title: "Week 7 Exercises: PCA & EFA"
params: 
    SHOW_SOLS: FALSE
    TOGGLE: TRUE
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
source('assets/setup.R')
library(xaringanExtra)
library(tidyverse)
library(patchwork)
xaringanExtra::use_panelset()
qcounter <- function(){
  if(!exists("qcounter_i")){
    qcounter_i <<- 1
  }else{
    qcounter_i <<- qcounter_i + 1
  }
  qcounter_i
}

library(psych)
```

:::frame
__New packages__  

We're going to be needing some different packages this week (no more lme4!).    
Make sure you have these packages installed:  

+ psych  
+ GPArotation  
+ car  

:::

```{r}
#| include: false

# Project management
# Team-work
# Analysing and evaluating information
# Influencing others
# Technical knowledge

varnames <- c("How effectively do they prioritize tasks to ensure project deadlines are met?",
"Rate their ability to create and maintain project schedules and timelines.",
"How well do they allocate resources to ensure efficient project execution?",
"Rate their proficiency in identifying and mitigating project risks.",
"How effectively do they communicate project progress and updates to stakeholders?",
"How well do they collaborate with team members to achieve common goals?",
"Rate their ability to actively listen to and consider the ideas and opinions of others.",
"How effectively do they contribute to a positive team environment?",
"Rate their willingness to provide support and assistance to team members when needed.",
"How well do they resolve conflicts and disagreements within the team?",
"How proficient are they in gathering and synthesizing relevant data to inform decision-making?",
"Rate their ability to critically evaluate the validity and reliability of information sources.",
"How effectively do they identify key insights and trends from complex datasets?",
"Rate their skill in developing logical and evidence-based conclusions from analyzed information.",
"How well do they communicate their analysis and findings to others in a clear and concise manner?",
"How effectively do they build rapport and establish credibility with others?",
"Rate their ability to articulate compelling arguments and persuasive messages.",
"How well do they adapt their communication style to resonate with different audiences?",
"Rate their skill in negotiating win-win solutions in challenging situations.",
"How effectively do they inspire and motivate others to take action or adopt new ideas?",
"How proficient are they in applying technical concepts and principles relevant to their role?",
"Rate their ability to stay updated with the latest developments and trends in their field.",
"How effectively do they troubleshoot technical issues and find innovative solutions?",
"Rate their skill in translating complex technical information into understandable terms for non-technical stakeholders.",
"How well do they leverage technical expertise for problem-solving?")

set.seed(223)
makeitems <- function(){
  S = runif(5,.7,2)
  f = runif(5,.7,.99)
  R = f %*% t(f)
  diag(R) = 1
  items = round(MASS::mvrnorm(400, mu = rnorm(5,3,.6), Sigma=diag(S)%*%R%*%diag(S)))
  apply(items, 2, function(x) pmin(7,pmax(1,x)))
}

pcs = lapply(1:3, function(x) makeitems())

df = do.call(cbind, pcs)

#pheatmap::pheatmap(cor(df))
#plot(eigen(cor(df))$values,type="b")

df <- as.data.frame(df)

principal(df,nfactors=3,rotate="none")$scores


names(df)<-varnames[c(1:10,21:25)]
#df <- df[,sample(1:15)]
dict = tibble(
  variable = c("name",paste0("q",1:15)),
  question = c("employee name", names(df))
)

names(df) <- paste0("q",1:15)
jobperf <- df |>
  mutate(
    name = randomNames::randomNames(nrow(df),
                                    sample.with.replacement=F),
    .before = 1
  )

#write_csv(jobperf,file="../../data/jobperfbonus.csv")




makeitems <- function(){
  S = runif(5,.4,2)
  f = runif(5,.4,.99)
  R = f %*% t(f)
  diag(R) = 1
  items = round(MASS::mvrnorm(400, mu = rnorm(5,3,.6), Sigma=diag(S)%*%R%*%diag(S)))
  apply(items, 2, function(x) pmin(7,pmax(1,x)))
}
eg_data = do.call(cbind,lapply(1, function(x) makeitems()))
eg_data[,4] <- max(eg_data[,4]) - eg_data[,4] + 1
eg_data[,5] <- max(eg_data[,5]) - eg_data[,5] + 1
eg_data <- as.data.frame(eg_data)
names(eg_data) <- paste0("item_",1:5)
```

# Reducing the dimensionality of job performance  

:::frame
__Data: jobperfbonus.csv__  

A company has asked line managers to fill out a questionnaire that asks them to rate the performance of each employee. The dataset we are providing contains each employee's rating on 15 different aspects of their performance.  

The company doesn't know what to do with so much data, and wants us to reduce it to a smaller number of distinct variables.  

It can be downloaded at [https://uoepsy.github.io/data/jobperfbonus.csv](https://uoepsy.github.io/data/jobperfbonus.csv){target="_blank"}

```{r}
#| echo: false
#| label: tbl-jpdict
#| tbl-cap: "data dictionary for jobperfbonus.csv"
gt::gt(dict)
```

:::


`r qbegin(qcounter())`
Load the data, and take a look at it.  

We're going to want to reduce these 15 variables (or "items") down into a smaller set. Should we use PCA or EFA?  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

```{r}
jobperf <- read_csv("https://uoepsy.github.io/data/jobperfbonus.csv")
head(jobperf)
```

Probably going to want to use PCA, because we're less interested in thinking about underlying latent dimensions of 'job performance' - i.e. we want to get a 'composite' rather than an underlying factor. 


`r solend()`

`r qbegin(qcounter())`
Explore the relationships between variables in the data. Below are various ways to do this.  

You're probably going to want to subset out _just_ the relevant variables (`q1` to `q15`).  

::: {.callout-note collapse="true"}
#### Correlation Matrix

You can give the `cor()` function a dataset and it will show you the correlations between all pairs of variables.  
It returns a 'correlation matrix' - which has a row for each variable and a column for each variable. Correlation matrices are square (same number of rows as columns), and symmetric (rotate it 90 degrees and it looks the same). The diagonals of the correlation matrix are all 1, because every variable is perfectly correlated with itself.  

```{r}
cor(eg_data) |>
  round(2)
```

Correlation matrices can get big! For $k$ variables, the correlation matrix contains $\frac{k(k+1)}{2}$ unique numbers. Sometimes you can get more from visualising the correlation matrix. 

```{r}
library(ggcorrplot)
ggcorrplot(cor(eg_data))
```

:::

::: {.callout-note collapse="true"}
#### Scatterplot Matrix

A Scatterplot Matrix is basically the same idea as a correlation matrix, but instead of the numeric correlation coefficient between each pair, we have a scatterplot between each pair.  

It's a good way to check for linearity of relationships prior to data reduction. These methods of data reduction are all based on correlations, which assume the relations we are capturing are linear.  

We can check linearity of relations using `pairs()` and also `pairs.panels(data)` (from the **psych** package), and you can view the histograms on the diagonals, allowing you to check univariate normality (which is usually a good enough proxy for multivariate normality). 

- `pairs(data)` - make a scatterplot matrix
- from __psych__, `pairs.panels(data)` - make a scatterplot matrix with correlations on the upper triangle
- from __car__, `scatterplotMatrix(data)`

Additionally, also from __psych__, the `multi.hist(data)` function will give us the individual histograms for each variable

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Let's keep the full data with the names, but make a new object that is just the performance data:  
```{r}
qperf <- jobperf |> select(-name)
```

It looks like we've got some very strong groups of questions there - q1 to q5 are all highly related to one another, as are q6 to q10, and q11 to q15. Furthermore, the relations between those sets are very weak, suggesting 3 groups that are fairly distinct.  

```{r}
library(ggcorrplot)
ggcorrplot(cor(qperf))
```

You'll probably have to zoom in when you do this yourself, as there are a lot of little plots there!  
```{r}
library(psych)
pairs.panels(qperf)
```

`r solend()`

`r qbegin(qcounter())`
How much variance in the data will be captured by 15 principal components? 


::: {.callout-tip collapse="true"}
#### Hints

We can figure this out without having to do anything - it's a theoretical question!  

:::



`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

All of it!  
The right hand entry of the "Cumulative Var" row is 1 - it explains everything. 
```{r}
principal(qperf, nfactors = 15, rotate = "none")
```

`r solend()`



`r qbegin(qcounter())`
How many components should we keep? Below are some reminders of the various criteria we can use to help us come to a decision.  


::: {.callout-note collapse="true"}
#### Kaiser's rule
  
According to Kaiser's rule, we should **keep the principal components having variance larger than 1**.   

The variances of each PC are shown in the row of the output named `SS loadings` and also in the `$values` from the object created by `principal()`.  

Standardized variables have a variance equal 1, and if we have $k$ standardised variables, then the total variance in the data is $k$. An eigenvalue of <1 represents that it is accounting for less variance than any individual original variable.  

__NOTE: Kaiser's Rule will very often lead to over-extracting (keeping too many components)__   

:::


::: {.callout-note collapse="true"}
#### The scree plot

The scree plot is a graphical criterion which involves plotting the variance for each principal component.
This can be easily done by calling `plot` on the variances, which are stored in `$values` of the object created by `principal()`, or by using the `scree()` function from the __psych__ package.  

When conducting an EFA as opposed to a PCA, you can remove the `factors = FALSE` bit.  
```{r}
library(psych)
scree(eg_data, factors = FALSE)
```

A typical scree plot features higher variances for the initial components and quickly drops to small variances where the curve is almost flat. The flat part of the curve represents the noise components, which are not able to capture the main sources of variability in the system. 

According to the scree plot criterion, we should **keep as many principal components up to where the "elbow" in the plot occurs.** So in the above plot, the elbow occurs at 2, so we would keep 1.  

__NOTE: Scree plots are subjective and may have multiple or no obvious kinks/elbows, making them hard to interpret__  

:::

::: {.callout-note collapse="true"}
#### Velicer’s Minimum Average Partial (MAP) method

The Minimum Average Partial (MAP) test computes the partial correlation matrix (removing and adjusting for a component from the correlation matrix), sequentially partialling out each component. At each step, the partial correlations are squared and their average is computed.  
At first, the components which are removed will be those that are most representative of the shared variance between 2+ variables, meaning that the "average squared partial correlation" will decrease. At some point in the process, the components being removed will begin represent variance that is specific to individual variables, meaning that the average squared partial correlation will increase.  
The MAP method is to keep the number of components for which the average squared partial correlation is at the minimum. 

We can conduct MAP in R using the `VSS()` function.  
When conducting an EFA as opposed to a PCA, you can set `fm` and `rotate` to the factor extraction method and rotation of your choosing.   
```{r}
library(psych)
VSS(eg_data, rotate = "none", 
    plot = FALSE, fm="pc", n = ncol(eg_data))
```
(be aware there is a lot of other information in this output too! For now just focus on the map column), and the part of the output that says "The Velicer MAP achieves a minimum of 0.06  with ?? factors".  

__NOTE: The MAP method will sometimes tend to under-extract (suggest too few components)__  

:::

::: {.callout-note collapse="true"}
#### Parallel analysis

Parallel analysis involves simulating lots of datasets of the same dimension but in which the variables are uncorrelated. For each of these simulations, a PCA is conducted on its correlation matrix, and the eigenvalues are extracted. We can then compare our eigenvalues from the PCA on our *actual* data to the average eigenvalues across these simulations. 
In theory, for uncorrelated variables, no components should explain more variance than any others, and eigenvalues should be equal to 1. In reality, variables are rarely truly uncorrelated, and so there will be slight variation in the magnitude of eigenvalues simply due to chance. 
The parallel analysis method suggests keeping those components for which the eigenvalues are greater than those from the simulations. 

It can be conducted in R using the `fa.parallel()` function.  
When conducting an EFA as opposed to a PCA, you can set `fa = "both"` to do this for both factor extraction and principal components.  
```{r}
library(psych)
fa.parallel(eg_data, fa="pc", n.iter = 500)
```

__NOTE: Parallel analysis will sometimes tend to over-extract (suggest too many components)__  

:::

`r qend()`
`r solbegin(label="Kaiser", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

According to Kaiser's rule, we should keep 3 components
```{r}
principal(qperf, nfactors = 15, rotate = "none")$values
```

`r solend()`
`r solbegin(label="Scree", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

According to the Scree plot, I would suggest keeping 3 components
```{r}
scree(qperf, factors = FALSE)
```

`r solend()`
`r solbegin(label="MAP", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

According to the MAP, we should keep 3 components

```{r}
VSS(qperf, n = ncol(qperf), 
    rotate = "none", fm = "pc", plot = FALSE)
```

`r solend()`
`r solbegin(label="Parallel Analysis", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

According to the parallel analysis, we should keep 3 components 
```{r}
fa.parallel(qperf, fa="pc", n.iter = 500)
```

`r solend()`
`r solbegin(label="Making a decision", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

In this case, everything agrees that we should retain 3 components:  
```{r}
#| echo: false
tibble(
  guides = c("Kaiser","Scree","MAP","Parallel Analysis"),
  suggestion = rep(3,4)
) |> gt::gt()
```

`r solend()`


`r qbegin(qcounter())`
Conduct a principal components analysis extracting the number of components you decided on from the previous question.  

Be sure to set `rotate = "none"` (a conventional PCA does not use rotations - it is simply about data reduction. The line is a bit blurred here, but once we start introducing rotations, we are moving more towards a form of EFA).  

Examine the loadings for the components. By thinking in relation to the questions that were asked (refer back to @tbl-jpdict), what do you think each component is capturing?  
`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

It's rarely as neat as this, but we can see the patterns of higher loadings for the groups of 5 questions on each component. 

- PC1 has higher loadings for q1 to q5 
- PC2 has higher loadings for q6 to q10 
- PC3 has higher loadings for q11 to q15 

Looking back at the questions in @tbl-jpdict, questions 1 to 5 were all about stuff related to 'project management'. Questions 6 to 10 were all about collaboration with team members, and questions 11 to 15 were all about technical skill. 

```{r}
principal(qperf, nfactors = 3, rotate = "none")
```


`r solend()`


`r qbegin(qcounter())`
Extract the scores on the principal components.  
The company wants to reward teamwork. Pick 10 people they should give a bonus to.  


::: {.callout-tip collapse="true"}
#### Hints

As seen in the reading, we can extract scores (a score on each component for each row of our original dataset) using the `$scores` from the object fitted with `principal()`.  

This will contain as many sets of scores as there are components. One of these (given the previous question) might be of use here.  

You'll likely want to join them back to the column of names. So we can figure out who gets the bonus. `cbind()` or `bind_cols()` might help here.  

:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

The second component seems to capture a lot of 'teamwork' related questions. So if we extract scores on that second component, we could then pick the 10 people for whom they are highest on that component.  

This will extract the scores:
```{r}
#| eval: false
principal(qperf, nfactors = 3, rotate = "none")$scores
```

Let's combine them with the original data that contains the employee names, so we can figure out who to give bonuses to.  
We could do this with `cbind()`, or `bind_cols()`, 
```{r}
# first we bind the columns of the scores, back to 
# the original data which contains the names
jobperf <- 
  bind_cols(
    principal(qperf, nfactors = 3, rotate = "none")$scores,
    jobperf
  ) 

# we can then choose just the 10 people 
# who have the highest scores on PC2 (the teamwork component)
jobperf |> select(name, PC2) |>
  arrange(desc(PC2))
```

`r solend()`
<br>

# Conduct Problems  



:::frame
__Data: Conduct Problems__  

A researcher is developing a new brief measure of Conduct Problems. She has collected data from n=450 adolescents on 10 items, which cover the following behaviours:  

1. Breaking curfew
1. Vandalism
1. Skipping school
1. Bullying
1. Spreading malicious rumours
1. Fighting
1. Lying
1. Using a weapon 
1. Stealing
1. Threatening others


Our task is to use the dimension reduction techniques we learned about in the lecture to help inform how to organise the items she has developed into subscales.  

The data can be found at [https://uoepsy.github.io/data/conduct_probs_scale.csv](https://uoepsy.github.io/data/conduct_probs_scale.csv){target="_blank"} 

:::

`r qbegin(qcounter())`
Read in the dataset.  
Create a correlation matrix for *the items*, and inspect the items to check their suitability for exploratory factor analysis (below are a couple of ways we can do this).  


::: {.callout-note collapse="true"}
#### Bartlett's Test  

The function `cortest.bartlett(cor(data), n = nrow(data))` conducts "Bartlett's test". This tests against the null that the correlation matrix is proportional to the identity matrix (a matrix of all 0s except for 1s on the diagonal).  

  - Null hypothesis: observed correlation matrix is equivalent to the identity matrix  
  - Alternative hypothesis: observed correlation matrix is not equivalent to the identity matrix.  
  


::: {.callout-tip collapse="true"}
#### What is the identity matrix?

The "Identity matrix" is a matrix of all 0s except for 1s on the diagonal.  
e.g. for a 3x3 matrix:  
$$
\begin{bmatrix}
1 & 0 & 0 \\
0 & 1 & 0 \\
0 & 0 & 1 \\
\end{bmatrix}
$$
If a correlation matrix looks like this, then it means there is __no__ shared variance between the items, so it is not suitable for factor analysis
:::

:::

::: {.callout-note collapse="true"}
#### Kaiser, Meyer, Olkin Measure of Sampling Adequacy  

You can check the "factorability" of the correlation matrix using `KMO(data)` (also from **psych**!).  

- Rules of thumb: 
    - $0.8 < MSA < 1$: the sampling is adequate
    - $MSA <0.6$: sampling is not adequate 
    - $MSA \sim 0$: large partial correlations compared to the sum of correlations. Not good for FA  
    
__Kaiser's suggested cuts__  

These are Kaiser's corresponding adjectives suggested for each level of the KMO:  

- 0.00 to 0.49 "unacceptable"  
- 0.50 to 0.59 "miserable"  
- 0.60 to 0.69 "mediocre"  
- 0.70 to 0.79 "middling"  
- 0.80 to 0.89 "meritorious"  
- 0.90 to 1.00 "marvelous"  


:::



`r qend()` 
`r solbegin(show=params$SHOW, toggle=params$TOGGLE)`
```{r}
cpdata <- read.csv("https://uoepsy.github.io/data/conduct_probs_scale.csv")
# discard the first column
cpdata <- cpdata[,-1]
```

Here's a correlation matrix. There's no obvious blocks of items here, but we can see that there are some fairly high correlations, as well as some weaker ones. All are positive.  
```{r}
ggcorrplot(cor(cpdata))
```

The Bartlett's test comes out with a p-value of 0 (which isn't possible, but it's been rounded for some reason). This suggests that we reject the null of this test (that our correlation matrix is proportional to the identity matrix). This is good. It basically means "we have some non-zero correlations"!  
```{r}
cortest.bartlett(cor(cpdata), n=450)
```

The overall sampling adequacy is 0.87, which is pretty good! (or rather, which is 'meritorious'!).  MSA for all items is >.8
```{r}
KMO(cpdata)  
```

Finally, all the relationships here look fairly linear:
```{r}
pairs.panels(cpdata)
```

`r solend()`


`r qbegin(qcounter())`
How many dimensions should be retained?  

This question can be answered in the same way as we did above for PCA - use a scree plot, parallel analysis, and MAP test to guide you.   

You can use `fa.parallel(data, fa = "both")` to conduct both parallel analysis and view the scree plot!   
`r qend()` 

`r solbegin(label="Scree", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

The scree plot shows a kink at 3, which suggests retaining 2 components. 
```{r}
scree(cpdata)
```

`r solend()`
`r solbegin(label="MAP", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

The MAP suggests retaining 2 factors. I'm just extracting the actuall `map` values here to save having to show all the other output. We can see that the 2nd entry is the smallest: 
```{r}
VSS(cpdata, plot = FALSE, n = ncol(cpdata))$map
```


`r solend()`
`r solbegin(label="Parallel Analysis", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Parallel analysis suggests 2 factors as well:
```{r}
fa.parallel(cpdata, fa = "both")
```

`r solend()`
`r solbegin(label="Making a decision", slabel=F, show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Again, a quite clear picture that 2 factors is preferred:  
```{r}
#| echo: false
tibble(
  guides = c("Scree","MAP","Parallel Analysis"),
  suggestion = rep(2,3)
) |> gt::gt()
```

`r solend()`

`r qbegin(qcounter())`
Use the function `fa()` from the **psych** package to conduct and EFA to extract 2 factors (this is what *we* suggest based on the various tests above, but *you* might feel differently - the ideal number of factors is subjective!). Use a suitable rotation (`rotate = ?`) and extraction method (`fm = ?`).  
```{r}
#| eval: false
myfa <- fa(data, nfactors = ?, rotate = ?, fm = ?)
```


::: {.callout-tip collapse="true"}
#### Hints

Would you expect factors to be correlated? If so, you'll want an oblique rotation.  

:::



`r qend()` 
`r solbegin(show=params$SHOW, toggle=params$TOGGLE)`
For example, you could choose an oblimin rotation to allow factors to correlate and use minres as the extraction method.  
```{r}
conduct_efa <- fa(cpdata, nfactors=2, rotate='oblimin', fm="minres")
```
`r solend()`

`r qbegin(qcounter())`
Inspect your solution. Make sure to look at and think about the loadings, the variance accounted for, and the factor correlations (if estimated).  

::: {.callout-tip collapse="true"}
#### Hints

Just printing an `fa` object:
```{r}
#| eval: false
myfa <- fa(data, ..... )
myfa
```
Will give you lots and lots of information.  
You can extract individual parts using:  

- `myfa$loadings` for the loadings
- `myfa$Vaccounted` for the variance accounted for by each factor
- `myfa$Phi` for the factor correlation matrix

You can find a quick guide to reading the `fa` output here: [efa_output.pdf](https://uoepsy.github.io/msmr/2324/misc/efa_output.pdf){target="_blank"}.  

:::

`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

Things look pretty good here. Each item has a clear primary loading on to one of the factors, and the complexity for all items is 1 (meaning they're clearly link to just one of the factors). The `h2` column is showing that the 2 factor solution is explaining 39%+ of the variance in each item.  Both factors are well determined, having a at least 3 salient loadings.  

The 2 factors together explain 57% of the variance in the data - both factors explain a similar amount (29% for factor 1, 28% for factor 2). 

We can also see that there is a moderate correlation between the two factors. Use of an oblique rotation was appropriate - if the correlation had been very weak, then it might not have differed much from if we used an orthogonal rotation.  

```{r}
#| eval: false
conduct_efa
```
```{r}
#| echo: false
.pp(conduct_efa, l=list(1:28))
```


`r solend()`



`r qbegin(qcounter())`
Look back to the description of the items, and suggest a name for your factors based on the patterns of loadings.  


::: {.callout-tip collapse="true"}
#### Hints

To sort the loadings, you can use
```{r}
#| eval: false
print(myfa$loadings, sort = TRUE)
```

:::

`r qend()` 
`r solbegin(show=params$SHOW, toggle=params$TOGGLE)`
You can inspect the loadings using:
```{r}
print(conduct_efa$loadings, sort=TRUE)
```
We can see that, ordered like this, we have five items that have high loadings for one factor and another five items that have high loadings for the other.  
  
The five items for factor 1 all have in common that they are non-aggressive forms of conduct problems. The five items for factor 2 are all more aggressive behaviours. We could, therefore, label our factors: ‘non-aggressive’ and ‘aggressive’ conduct problems.
`r solend()`

`r qbegin(qcounter())`
Compare your three different solutions: 

1) your current solution from the previous questions
2) one where you fit 1 more factor
3) one where you fit 1 fewer factors   

Which one looks best?  


::: {.callout-tip collapse="true"}
#### Hints

We're looking here to assess:  

- how much variance is accounted for by each solution
- do all factors load on 3+ items at a salient level?  
- do all items have at least one loading at a salient level?
- are there any "Heywood cases" (communalities or standardised loadings that are >1)?
- should we perhaps remove some of the more complex items?
- is the factor structure (items that load on to each factor) coherent, and does it make theoretical sense?

:::


`r qend()`
`r solbegin(show=params$SHOW_SOLS, toggle=params$TOGGLE)`

The 1-factor model explains 39% of the variance (as opposed to the 57% explained by the 2 factor solution), and all items load fairly high on the factor. The downside here is that we're not discerning between different types of conduct problems that we did in the 2 factor solution.  
```{r}
conduct_1 <- fa(cpdata, nfactors=1, fm="minres")
conduct_1
```

The 3-factor model explains 60% of the variance (only 3% more than the 2-factor model). Notably, the third factor is not very clearly defined - it only has 1 salient loading (possibly 2 if we consider the 0.3 to be salient, but that item is primarily loaded on the 2nd factor). 
```{r}
conduct_3 <- fa(cpdata, nfactors=3, rotate='oblimin', fm="minres")
conduct_3
```



`r solend()`


`r qbegin(qcounter())`
Drawing on your previous answers and conducting any additional analyses you believe would be necessary to identify an optimal factor structure for the 10 conduct problems, write a brief text that summarises your method and the results from your chosen optimal model.  


::: {.callout-tip collapse="true"}
#### Hints

Write about the process that led you to the number of factors. Discuss the patterns of loadings and provide definitions of the factors. 

:::




`r qend()`
`r solbegin(show=params$SHOW, toggle=params$TOGGLE)`
The main principles governing the reporting of statistical results are transparency and reproducibility (i.e., someone should be able to reproduce your analysis based on your description).

An example summary would be:

:::int 

First, the data were checked for their suitability for factor analysis. Normality was checked using visual inspection of histograms, linearity was checked through the inspection of the linear and lowess lines for the pairwise relations of the variables, and factorability was confirmed using a KMO test, which yielded an overall KMO of $.87$ with no variable KMOs $<.50$. 
An exploratory factor analysis was conducted to inform the structure of a new conduct problems test. Inspection of a scree plot alongside parallel analysis (using principal components analysis; PA-PCA) and the MAP test were used to guide the number of factors to retain. All three methods suggested retaining two factors; however, a one-factor and three-factor solution were inspected to confirm that the two-factor solution was optimal from a substantive and practical perspective, e.g., that it neither blurred important factor distinctions nor included a minor factor that would be better combined with the other in a one-factor solution. These factor analyses were conducted using minres extraction and (for the two- and three-factor solutions) an oblimin rotation, because it was expected that the factors would correlate. Inspection of the factor loadings and correlations reinforced that the two-factor solution was optimal: both factors were well-determined, including 5 loadings $>|0.3|$ and the one-factor model blurred the distinction between different forms of conduct problems. 
The factor loadings are provided in @tbl-loadingtab^[You should provide the table of factor loadings. It is conventional to omit factor loadings $<|0.3|$; however, be sure to ensure that you mention this in a table note.]. Based on the pattern of factor loadings, the two factors were labelled 'aggressive conduct problems' and 'non-aggressive conduct problems'. These factors had a  correlation of $r=.43$. Overall, they accounted for 57% of the variance in the items, suggesting that a two-factor solution effectively summarised the variation in the items.


```{r}
#| label: tbl-loadingtab
#| echo: false
#| tbl-cap: "Factor Loadings"
loadings = unclass(conduct_efa$loadings)
loadings = round(loadings, 3)
loadings = loadings[order(loadings[,1],decreasing = T),]
loadings[abs(loadings) < 0.3] = NA
loadings[!is.na(loadings[,2]),] <- 
  loadings[!is.na(loadings[,2]),][
    order(loadings[!is.na(loadings[,2]),2],decreasing = T),
  ]
options(knitr.kable.NA = '')
knitr::kable(loadings, digits = 2)
```

:::


`r solend()`